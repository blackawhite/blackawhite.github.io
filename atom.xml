<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水手</title>
  <subtitle>为之则易，不为则难</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wwww.yesokiloveyou.com/"/>
  <updated>2016-12-12T13:32:55.000Z</updated>
  <id>http://wwww.yesokiloveyou.com/</id>
  
  <author>
    <name>yangk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript Object</title>
    <link href="http://wwww.yesokiloveyou.com/2016/12/11/js-object/"/>
    <id>http://wwww.yesokiloveyou.com/2016/12/11/js-object/</id>
    <published>2016-12-11T13:45:05.000Z</published>
    <updated>2016-12-12T13:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="封装-单例模式"><a href="#封装-单例模式" class="headerlink" title="封装-单例模式"></a>封装-单例模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123;<span class="comment">// 命名空间，起到了分组的作用，也避免了冲突</span></div><div class="line">    <span class="string">"name"</span>: <span class="string">"yangk"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person2 = &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"jiangjun"</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 解决上述代码重复的问题</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">name</span>: name</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = CreatePerson(<span class="string">"yangk"</span>);</div><div class="line"><span class="keyword">var</span> person1 = CreatePerson(<span class="string">"jiangjun"</span>);</div><div class="line"><span class="comment">// 问题：person1和person2之间没有内在的联系，不能反映出它们是同一个原型对象的实例</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="封装-工厂模式"><a href="#封装-工厂模式" class="headerlink" title="封装-工厂模式"></a>封装-工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="comment">// 原料</span></div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    <span class="comment">// 加工</span></div><div class="line">    obj.name = name;</div><div class="line">    obj.age = age;</div><div class="line">    obj.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 出厂</span></div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = CreatePerson(<span class="string">"yangk"</span>,<span class="string">"24"</span>);</div><div class="line"><span class="keyword">var</span> person2 = CreatePerson(<span class="string">"jiangjun"</span>,<span class="string">"25"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person1.showName == person2.showName);<span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="封装-构造函数-原型模式"><a href="#封装-构造函数-原型模式" class="headerlink" title="封装-构造函数+原型模式"></a>封装-构造函数+原型模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">CreatePerson.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> CreatePerson(<span class="string">"yangk"</span>,<span class="string">"24"</span>);<span class="comment">// 不传参时可以把后面的括号省略</span></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> CreatePerson(<span class="string">"jiangjun"</span>,<span class="string">"28"</span>);</div><div class="line"><span class="built_in">console</span>.log(person1.showName == person2.showName);<span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="继承-call-apply"><a href="#继承-call-apply" class="headerlink" title="继承-call/apply"></a>继承-call/apply</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name,sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;</div><div class="line">CreatePerson.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateStar</span>(<span class="params">name,sex,job</span>)</span>&#123;</div><div class="line">    CreatePerson.call(<span class="keyword">this</span>,name,sex);<span class="comment">// this实例对象，继承属性</span></div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">&#125;</div><div class="line">CreateStar.prototype = CreatePerson.prototype;<span class="comment">// 继承方法，CreateStar.prototype上添加方法会影响父类</span></div><div class="line">CreateStar.prototype.showJob = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.job);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> CreatePerson(<span class="string">'yangk'</span>,<span class="string">'男'</span>);</div><div class="line"><span class="built_in">console</span>.log(person1.showJob);<span class="comment">// 有</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> CreateStar(<span class="string">'黄晓明'</span>,<span class="string">'男'</span>,<span class="string">'演员'</span>);</div><div class="line">person2.showName();</div></pre></td></tr></table></figure>
<h3 id="继承-浅拷贝"><a href="#继承-浅拷贝" class="headerlink" title="继承-浅拷贝"></a>继承-浅拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解决上面prototype继承的时候影响父类的问题</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">obj1,obj2</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj2)&#123;</div><div class="line">        obj1[attr] = obj2[attr];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name,sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;</div><div class="line">CreatePerson.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateStar</span>(<span class="params">name,sex,job</span>)</span>&#123;</div><div class="line">    CreatePerson.call(<span class="keyword">this</span>,name,sex);<span class="comment">// this实例对象，继承属性</span></div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">&#125;</div><div class="line"><span class="comment">//CreateStar.prototype = CreatePerson.prototype;// 继承方法，CreateStar.prototype上添加方法会影响父类</span></div><div class="line">extend(CreateStar.prototype,CreatePerson.prototype);</div><div class="line">CreateStar.prototype.showJob = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.job);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> CreatePerson(<span class="string">'yangk'</span>,<span class="string">'男'</span>);</div><div class="line"><span class="built_in">console</span>.log(person1.showJob);<span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> CreateStar(<span class="string">'黄晓明'</span>,<span class="string">'男'</span>,<span class="string">'演员'</span>);</div><div class="line">person2.showName();</div></pre></td></tr></table></figure>
<h3 id="继承-深拷贝"><a href="#继承-深拷贝" class="headerlink" title="继承-深拷贝"></a>继承-深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Child,Parent</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> Parent)&#123;</div><div class="line">        Child[attr] = Parent[attr];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">Parent,Child</span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> Child = Child || &#123;&#125;;</div><div class="line">　　　　<span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> Parent)&#123;</div><div class="line">　　　　　　<span class="keyword">if</span>(<span class="keyword">typeof</span> Parent[i] === <span class="string">'object'</span>)&#123;</div><div class="line">　　　　　　　　Child[i] = (Parent[i].constructor === <span class="built_in">Array</span>) ? [] : &#123;&#125;;</div><div class="line">　　　　　　　　deepCopy(Parent[i], Child[i]);</div><div class="line">　　　　　　&#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">　　　　　　　　Child[i] = Parent[i];</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> Child;</div><div class="line">　　&#125;</div><div class="line"><span class="keyword">var</span> arrParent = [</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">];</div><div class="line"><span class="keyword">var</span> arrChild = [];</div><div class="line"><span class="comment">// extend(arrChild,arrParent);</span></div><div class="line"><span class="comment">// deepCopy(arrParent,arrChild);</span></div><div class="line">arrChild = deepCopy(arrParent);</div><div class="line"></div><div class="line">arrChild[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">"yangk"</span>;</div><div class="line"><span class="built_in">console</span>.log(arrParent[<span class="number">2</span>][<span class="number">0</span>]);<span class="comment">// 父元素不变</span></div></pre></td></tr></table></figure>
<h3 id="继承-空对象中介"><a href="#继承-空对象中介" class="headerlink" title="继承-空对象中介"></a>继承-空对象中介</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Child,Parent</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    F.prototype = Parent.prototype;</div><div class="line">    Child.prototype = <span class="keyword">new</span> F();</div><div class="line">    Child.prototype.constructor = Child;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">CreatePerson.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateStar</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    CreatePerson.call(<span class="keyword">this</span>,name);<span class="comment">// 属性还是需要call办法继承</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 避免属性继承，只继承showName，画画原型链就明白</span></div><div class="line"><span class="comment">// var F = function()&#123;&#125;;</span></div><div class="line"><span class="comment">// F.prototype = CreatePerson.prototype;</span></div><div class="line"><span class="comment">// CreateStar.prototype = new F();</span></div><div class="line"><span class="comment">// CreateStar.prototype.constructor = CreateStar;</span></div><div class="line">extend(CreateStar,CreatePerson);</div><div class="line"></div><div class="line">CreateStar.prototype.showYi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 对父类没影响</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> CreateStar(<span class="string">"yangk"</span>);</div><div class="line">person1.showName();</div><div class="line">person1.showYi();</div></pre></td></tr></table></figure>
<h3 id="关于类中return要注意的"><a href="#关于类中return要注意的" class="headerlink" title="关于类中return要注意的"></a>关于类中return要注意的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;<span class="comment">// 这里的num和this.num没有任何关系</span></div><div class="line">    <span class="keyword">this</span>.x = <span class="number">100</span>;</div><div class="line">    <span class="keyword">this</span>.getX = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//return 100;// 不会有卵用</span></div><div class="line">    <span class="comment">//return &#123;name: "yangk"&#125;;// 会覆盖默认返回的</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn;</div><div class="line"><span class="built_in">console</span>.log(f1.num);<span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(f1);<span class="comment">// 默认返回类的实例对象</span></div><div class="line"></div><div class="line"><span class="comment">// instanceof检测实例是否属于某个类</span></div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> Fn);<span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// typeof不能细分Object下的数组、正则...，可以用instanceof来细分</span></div></pre></td></tr></table></figure>
<h3 id="判断是否公有属性-方法"><a href="#判断是否公有属性-方法" class="headerlink" title="判断是否公有属性/方法"></a>判断是否公有属性/方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 检测某一个属性是否属于这个对象</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"getX"</span> <span class="keyword">in</span> f1);</div><div class="line"><span class="comment">// 检测某一个属性是否属于这个对象的私有属性</span></div><div class="line"><span class="built_in">console</span>.log(f1.hasOwnProperty(<span class="string">"getX"</span>));<span class="comment">// f1下的hasOwnProperty属性是通过原型链找到Object上的</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPubProperty</span>(<span class="params">obj,attr</span>)</span>&#123;<span class="comment">// 检测是否是共有</span></div><div class="line">    <span class="comment">// 是其属性且不是其私有的</span></div><div class="line">    <span class="keyword">return</span> (attr <span class="keyword">in</span> obj) &amp;&amp; !obj.hasOwnProperty(attr);<span class="comment">// false</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(hasPubProperty(f1,<span class="string">"getX"</span>));</div></pre></td></tr></table></figure>
<h3 id="理解原型链"><a href="#理解原型链" class="headerlink" title="理解原型链"></a>理解原型链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">每一个函数数据类型(普通函数、类、Object)都有一个天生的属性：prototype，并且这个属性是一个对象数据类型的；</div><div class="line">prototype上又有一个天生的属性：constructor，属性值是当前函数／类本身，Fn；</div><div class="line">每一个对象(普通对象、实例、prototype)数据类型也天生自带属性：__proto__，属性值是当前实例所属类的原型。</div><div class="line">``` javascript</div><div class="line">function Fn()&#123;</div><div class="line">    this.x = 100;</div><div class="line">    this.sum = function()&#123;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">Fn.prototype.getX = function()&#123;</div><div class="line">    console.log(this.x);</div><div class="line">&#125;;</div><div class="line">Fn.prototype.sum = function()&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line">var f1 = new Fn;</div><div class="line">var f2 = new Fn;</div><div class="line">console.log(Fn.prototype.constructor === Fn);// 验证第一二句话</div><div class="line">console.log(f1.__proto__ === Fn.prototype);// 验证第三句话</div><div class="line"></div><div class="line">console.log(f1.__proto__.getX === f2.getX);// true</div><div class="line">console.log(f1.getX === Fn.prototype.getX);// true</div><div class="line"></div><div class="line">console.log(f1.sum === f2.__proto__.sum);// false，私有和公有，先找私有，找到就不找了，找不到再找公有</div><div class="line">console.log(f1.sum === Fn.prototype.sum);</div><div class="line"></div><div class="line">f1.sum = function()&#123;</div><div class="line">    // 修改私有的</div><div class="line">&#125;;</div><div class="line">f1.__proto__.sum = function()&#123;</div><div class="line">    // 修改公有的，IE不让用</div><div class="line">&#125;;</div><div class="line">Fn.prototype.sum = function()&#123;</div><div class="line">    // 修改公有的，这样应对IE</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><img src="/resources/images/js.jpeg" alt=""></p>
<h3 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">100</span>;<span class="comment">// 这里的this是实例</span></div><div class="line">    <span class="keyword">this</span>.y = <span class="number">200</span>;</div><div class="line">    <span class="keyword">this</span>.getY = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.y);<span class="comment">// 这里的this要看在哪执行的</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">Fn.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Fn,</div><div class="line">    <span class="attr">y</span>: <span class="number">300</span>,</div><div class="line">    <span class="attr">getX</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);<span class="comment">// 这里的this要看在哪执行的</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getY</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.y);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn();</div><div class="line">f.getX();<span class="comment">// 私有没有，执行公有的 &gt; 100</span></div><div class="line"><span class="comment">// 先确定this指向</span></div><div class="line"><span class="comment">// 把this替换成对应的代码</span></div><div class="line"><span class="comment">// 按照原型链查找的机制一步步的寻找结果</span></div><div class="line"></div><div class="line">f.__proto__.getX();<span class="comment">// 因为f.__proto__直接指向prototype所以直接执行公有的，但是this是f.__proto__，直接查找公有的prototype，发现并没有，所以undefined</span></div><div class="line"></div><div class="line">Fn.prototype.getX();<span class="comment">// undefined</span></div><div class="line"></div><div class="line">f.getY();<span class="comment">// 执行私有的</span></div><div class="line"></div><div class="line">Fn.prototype.getY();<span class="comment">// 直接执行公有的</span></div></pre></td></tr></table></figure>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.myUnique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.length;i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(obj[<span class="keyword">this</span>[i]] == <span class="keyword">this</span>[i])&#123;</div><div class="line">            <span class="comment">// arr.splice(i,1);</span></div><div class="line">            <span class="keyword">this</span>[i] = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>];</div><div class="line">            <span class="keyword">this</span>.length --;<span class="comment">// 删除</span></div><div class="line">            i --;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        obj[<span class="keyword">this</span>[i]] = <span class="keyword">this</span>[i];</div><div class="line">    &#125;</div><div class="line">    obj = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;<span class="comment">// 为了实现链式写法</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="comment">// arr.myUnique();// this &gt; arr</span></div><div class="line"><span class="comment">// arr.__proto__.myUnique();// ie不认</span></div><div class="line"><span class="comment">// Array.prototype.myUnique();// this &gt; Array.prototype</span></div><div class="line"><span class="comment">// sort执行后的返回值是排序后的 数组 ，所以可以用reverse()...</span></div><div class="line">arr.myUnique().sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a - b;</div><div class="line">&#125;).reverse().pop();<span class="comment">// pop返回的是被删除的元素</span></div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
<h3 id="遍历私有属性-方法"><a href="#遍历私有属性-方法" class="headerlink" title="遍历私有属性/方法"></a>遍历私有属性/方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;<span class="comment">// 会遍历私有或自己写的公有的</span></div><div class="line">    <span class="comment">// if(obj.propertyIsEnumerable(key))&#123;// 可枚举</span></div><div class="line">    <span class="comment">//     // 只有私有的了</span></div><div class="line">    <span class="comment">//     console.log(obj[key]);</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;<span class="comment">// 也可以这样判断是否是自己私有的</span></div><div class="line">        <span class="built_in">console</span>.log(obj[key]);   </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 私有属性才可枚举</span></div><div class="line"><span class="built_in">console</span>.log(obj.propertyIsEnumerable(<span class="string">"name"</span>));<span class="comment">// true</span></div><div class="line"><span class="comment">// 公有属性不可枚举</span></div><div class="line"><span class="built_in">console</span>.log(obj.propertyIsEnumerable(<span class="string">"aaa"</span>));<span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(obj.propertyIsEnumerable(<span class="string">"toString"</span>));<span class="comment">// false</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;封装-单例模式&quot;&gt;&lt;a href=&quot;#封装-单例模式&quot; class=&quot;headerlink&quot; title=&quot;封装-单例模式&quot;&gt;&lt;/a&gt;封装-单例模式&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 命名空间，起到了分组的作用，也避免了冲突&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;yangk&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2 = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;jiangjun&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 解决上述代码重复的问题&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreatePerson&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = CreatePerson(&lt;span class=&quot;string&quot;&gt;&quot;yangk&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = CreatePerson(&lt;span class=&quot;string&quot;&gt;&quot;jiangjun&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 问题：person1和person2之间没有内在的联系，不能反映出它们是同一个原型对象的实例&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript mark</title>
    <link href="http://wwww.yesokiloveyou.com/2016/12/04/base-js/"/>
    <id>http://wwww.yesokiloveyou.com/2016/12/04/base-js/</id>
    <published>2016-12-03T16:11:18.000Z</published>
    <updated>2016-12-12T13:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript学习中一些零碎笔记，持续更新…<br><a id="more"></a></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">基本：</div><div class="line">    number、string、boolean、<span class="literal">null</span>、<span class="literal">undefined</span></div><div class="line">引用：</div><div class="line">    object:&#123;&#125;、[]、/^$/、<span class="built_in">Date</span></div><div class="line">    <span class="function"><span class="keyword">function</span></span></div></pre></td></tr></table></figure>
<h3 id="比较的奥秘"><a href="#比较的奥秘" class="headerlink" title="比较的奥秘"></a>比较的奥秘</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>中<span class="keyword">case</span>的比较是===</div><div class="line"></div><div class="line">!：首先将值转换为布尔类型的，然后再取反</div><div class="line"></div><div class="line">!!：将其他数据类型转换为布尔类型，相当于<span class="built_in">Boolean</span>()</div><div class="line"></div><div class="line"><span class="number">1</span>、对象和对象比较永远不想等，例如[]==[],&#123;&#125;==&#123;&#125;</div><div class="line"></div><div class="line"><span class="number">2</span>、对象和字符串比较，先调用toString()方法先将对象转换为字符串，然后再进行比较，例如[] == <span class="string">""</span>为<span class="literal">true</span>，&#123;&#125;转换为字符串是<span class="string">"[object object]"</span>，所以&#123;&#125; == <span class="string">""</span>为<span class="literal">false</span></div><div class="line"></div><div class="line"><span class="number">3</span>、对象和布尔类型比较，对象先转化为字符串(toString)，然后转换为数字(<span class="built_in">Number</span>)，布尔类型也转换为数字(<span class="number">1</span>或<span class="number">0</span>)，<span class="built_in">Number</span>(<span class="string">""</span>)是<span class="number">0</span>，例如[] == <span class="literal">false</span>是<span class="literal">true</span></div><div class="line"></div><div class="line"><span class="number">4</span>、对象和数字比较，同上...例如[] == <span class="number">1</span>为<span class="literal">false</span></div><div class="line"></div><div class="line"><span class="number">5</span>、布尔和数字比较，布尔转换为数字(<span class="number">1</span>或<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="number">6</span>、字符串和数字，字符串转换为数字</div><div class="line"></div><div class="line"><span class="number">7</span>、字符串和布尔，都转换为数字</div><div class="line"></div><div class="line"><span class="number">9</span>、<span class="literal">null</span> == <span class="literal">undefined</span>是<span class="literal">true</span>，除此之外<span class="literal">null</span>或<span class="literal">undefined</span>和其他任何数据类型的比较都不相等</div><div class="line"></div><div class="line"><span class="number">10</span>、JS中==是值比较，===是值和类型都比较</div></pre></td></tr></table></figure>
<h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><p>同一次预解析只发生在一个(script)脚本块中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 带var会进行预解析，结果undefined，不加报错则不会预解析，报错</span></div><div class="line"><span class="built_in">console</span>.log(num1);<span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> num1 = <span class="number">12</span>;</div><div class="line"><span class="built_in">console</span>.log(num2);<span class="comment">// 报错</span></div><div class="line">num2 = <span class="number">12</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    alert(a);<span class="comment">// 先预解析弹出undifined，注意这两句的先后顺序！再注意下面的var，由于预解析时找出下面的var，故不向上找啦！</span></div><div class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">box();</div><div class="line">alert(a);<span class="comment">// 弹出2</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    alert(a);<span class="comment">// 函数内预解析找不到var，向上找为2就弹出2.然后向下执行又被修改为1</span></div><div class="line">    a=<span class="number">1</span>;<span class="comment">// 能修改全部变量的a</span></div><div class="line">&#125;</div><div class="line">box();</div><div class="line">alert(a);<span class="comment">// 所以弹出1</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params">a</span>)</span>&#123; </div><div class="line">    alert(a);<span class="comment">// 函数内预解析找到参数a，就不向上找了，由于调用时没有传入参数，所以弹出undefined </span></div><div class="line">    a=<span class="number">1</span>;<span class="comment">// 此时的a为局部变量，并赋值为1，与此函数外面的a没有任何关系啦</span></div><div class="line">&#125;</div><div class="line">box();</div><div class="line">alert(a);<span class="comment">// 所以弹出2</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params">a</span>)</span>&#123;<span class="comment">// 参数的本质是个局部变量即var a=2;</span></div><div class="line">    alert(a);<span class="comment">// 弹出2</span></div><div class="line">    a=<span class="number">1</span>;<span class="comment">// 此时的a之所以不能修改外面的值啦，是因为预解析时函数内已找到参数，此时修改的是函数内a的值</span></div><div class="line">&#125;</div><div class="line">box(a);</div><div class="line">alert(a);<span class="comment">// 弹出2</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">alert(f2);<span class="comment">// undefined</span></div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123; </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        <span class="keyword">var</span> b=<span class="number">2</span>;</div><div class="line">        alert(b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 带var和不带var的区别：有没有预解析，undefined和报错的区别</span></div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 报错，没有var预解析，找不到b</span></div><div class="line">b = <span class="number">12</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 带var的先声明默认赋值undefined，预解析只发生在当前作用域</span></div><div class="line"><span class="comment">// 带function的声明并定义完成，即开辟内存空间并存储完成</span></div><div class="line">alert(n);<span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> n = <span class="number">9</span>;<span class="comment">// </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(n);<span class="comment">// undefined</span></div><div class="line">    n = <span class="number">7</span>;<span class="comment">// 私有作用域变成7</span></div><div class="line">    <span class="keyword">var</span> n = <span class="number">6</span>;<span class="comment">// 私有作用域变成6</span></div><div class="line">&#125;</div><div class="line">fn();</div><div class="line">alert(n);<span class="comment">// 9</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">9</span>;</div><div class="line"><span class="keyword">var</span> s = <span class="string">"yangk"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);<span class="comment">// undefined</span></div><div class="line">    s = <span class="string">'jiangjun'</span>;</div><div class="line">    n = <span class="number">7</span>;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">6</span>;</div><div class="line">    <span class="built_in">console</span>.log(s);<span class="comment">// jiangjun</span></div><div class="line">&#125;</div><div class="line">fn();</div><div class="line"><span class="built_in">console</span>.log(n);<span class="comment">// 9</span></div><div class="line"><span class="built_in">console</span>.log(s);<span class="comment">// jiangjun</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发现相重的，不重复声明，但可以重复定义赋值，而函数预解析时声明并定义赋值</span></div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">// function a()&#123; console.log(2); &#125;</span></div><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">// function a()&#123; console.log(2); &#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">// function a()&#123; console.log(2); &#125;</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">3</span>;<span class="comment">// 重新赋值为3</span></div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 3</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 预解析是不管条件语句的</span></div><div class="line"><span class="keyword">if</span>(!(<span class="string">"a"</span> <span class="keyword">in</span> <span class="built_in">window</span>))&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">12</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);<span class="comment">// √</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">// undefined</span></div><div class="line"><span class="keyword">if</span>(<span class="number">1</span> != <span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">12</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只预解释=左边的，右边不解释</span></div><div class="line"><span class="built_in">console</span>.log(fn);<span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 报错</span></div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">fn();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// function中return 下面 的代码虽然不执行了，但是会预解析，后面 返回值不预解释</span></div><div class="line"><span class="comment">// 预解释发生在一个(script)脚本块中，不同的脚本块中不预解释</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(b);<span class="comment">// undefined</span></div><div class="line">    <span class="built_in">console</span>.log(a);<span class="comment">// 报错</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">12</span>;</div><div class="line">&#125;</div><div class="line">fn();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自执行函数在全局作用域下是不尽兴预解释的，当代码执行到这里的时候定义和执行一起完成</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</div><div class="line">~(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</div><div class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</div><div class="line">+(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</div><div class="line">-(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JS中如果变量的名字和函数的名字一样其实是一个东西，会重复，会冲突</span></div><div class="line"><span class="comment">// 预解释的时候如果名字已经声明过了，则不需要重新的声明，但是需要重新的赋值</span></div><div class="line"><span class="comment">// var fn = 13;</span></div><div class="line"><span class="comment">// function fn()&#123;</span></div><div class="line"><span class="comment">//     console.log("ok");</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 注意函数的预解释是声明加定义</span></div><div class="line">fn();<span class="comment">// 2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 声明 + 定义(赋值)，由于一开始就声明+定义了，这里不会对再经过的代码起作用（声明／定义）</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">fn();<span class="comment">// 2</span></div><div class="line"><span class="keyword">var</span> fn = <span class="number">10</span>;<span class="comment">// 再此经过时会重新定义</span></div><div class="line">fn();<span class="comment">// 10()会报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 定义</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line">fn();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> n + i ++;<span class="comment">// 这里先执行i ++</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fo();</div><div class="line"><span class="keyword">var</span> a = f(<span class="number">15</span>);</div><div class="line">alert(a);<span class="comment">// 15，并且上面f()中的i变成了1</span></div><div class="line"><span class="keyword">var</span> d = f(<span class="number">20</span>);</div><div class="line">alert(d);<span class="comment">// 21</span></div><div class="line"><span class="keyword">var</span> b = fo()(<span class="number">15</span>);<span class="comment">// 重新执行了15</span></div><div class="line">alert(b);</div><div class="line"><span class="keyword">var</span> c = fo()(<span class="number">20</span>);<span class="comment">// 重新执行了20</span></div><div class="line">alert(c);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> number = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">number</span>: <span class="number">4</span>,</div><div class="line">    <span class="attr">fn1</span>: (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 一上来自执行</span></div><div class="line">        <span class="keyword">this</span>.number *= <span class="number">2</span>;<span class="comment">// this是window</span></div><div class="line">        number = number * <span class="number">2</span>;<span class="comment">// undefined * 2</span></div><div class="line">        <span class="built_in">console</span>.log(number);<span class="comment">// NaN</span></div><div class="line">        <span class="keyword">var</span> number = <span class="number">3</span>;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.number *= <span class="number">2</span>;</div><div class="line">            number *= <span class="number">3</span>;</div><div class="line">            alert(number);</div><div class="line">        &#125;</div><div class="line">    &#125;)()</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> fn1 = obj.fn1;<span class="comment">// 这里只是return的函数，上面的console.log(number)不会再输出了</span></div><div class="line">alert(number);<span class="comment">// 全局的number等于4</span></div><div class="line">fn1();<span class="comment">// 局部的number等于9，此时全局的number已经变成8</span></div><div class="line"></div><div class="line">obj.fn1();<span class="comment">// 局部的number驻留内存9 * 3 = 27，此时obj.number已经等于8</span></div><div class="line">alert(<span class="built_in">window</span>.number);<span class="comment">// 8</span></div><div class="line">alert(obj.number);<span class="comment">// 8</span></div></pre></td></tr></table></figure>
<h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//JS要执行的代码</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e)&#123;<span class="comment">//形参一定要写，名字可以随便起，当try中代码报错了，会自动的执行catch中的代码</span></div><div class="line">    <span class="comment">//e.message;</span></div><div class="line">    <span class="comment">//throw new Error("shit");</span></div><div class="line">    <span class="comment">//throw new ReferenceError;// 引用错误</span></div><div class="line">    <span class="comment">//throw new TypeError;// 类型错误</span></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"ss"</span>);<span class="comment">// 范围错误</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span>&#123;<span class="comment">// 不管try是否报错这里都会执行</span></div><div class="line">    <span class="comment">// 一般不加</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>作用1：不让浏览器控制台报错，继续执行后面的JS代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(num);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e)&#123;</div><div class="line">    <span class="built_in">console</span>.log(e.message);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);<span class="comment">// 我会继续执行</span></div></pre></td></tr></table></figure></p>
<p>作用2：既要捕获错误信息，也可手动定义错误内容，又要下面的代码不执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(num);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(e)&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"shit"</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);<span class="comment">// 我会继续执行</span></div></pre></td></tr></table></figure></p>
<p>作用3：处理浏览器的兼容性…</p>
<h3 id="查找上级作用域"><a href="#查找上级作用域" class="headerlink" title="查找上级作用域"></a>查找上级作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如何查找当前作用域的上一级作用域：看当前函数是在哪个作用域下定义的，和函数在哪执行的无关</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">120</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// return后的不预解释，直接在这里定义，返回函数的内存地址。函数是在这里定义的</span></div><div class="line">        <span class="built_in">console</span>.log(num);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn();<span class="comment">// fn()执行后返回一个函数，执行函数会形成一个私有作用域</span></div><div class="line">f();<span class="comment">// 形成私有作用域，num不是私有的，往上找...</span></div><div class="line"></div><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">1200</span>;</div><div class="line">    f();</div><div class="line">&#125;();</div><div class="line"><span class="comment">// 上面将形成3个栈内存，2个堆内存，画图理解</span></div></pre></td></tr></table></figure>
<h3 id="点击计数"><a href="#点击计数" class="headerlink" title="点击计数"></a>点击计数</h3><h4 id="利用全局变量"><a href="#利用全局变量" class="headerlink" title="利用全局变量"></a>利用全局变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 利用全局作用域不销毁的原理，弊端：不销毁且容易冲突</span></div><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oDiv.innerHTML = <span class="number">0</span>;</div><div class="line">oDiv.style.cssText = <span class="string">"border: 1px solid red;height: 40px;line-height: 40px;text-align: center;font-size: 20px;cursor: pointer;"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    num ++;</div><div class="line">    oDiv.innerHTML = num;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="利用私有作用域"><a href="#利用私有作用域" class="headerlink" title="利用私有作用域"></a>利用私有作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 弊端：有一个不销毁的私有作用域，占一丢丢内存</span></div><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oDiv.innerHTML = <span class="number">0</span>;</div><div class="line">oDiv.style.cssText = <span class="string">"border: 1px solid red;height: 40px;line-height: 40px;text-align: center;font-size: 20px;cursor: pointer;"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line">    oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        num ++;</div><div class="line">        oDiv.innerHTML = num;</div><div class="line">    &#125;;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p>函数执行形成一个私有作用域，保护里面的私有变量不受外界干扰，我们把这种机制叫做闭包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">12</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 销毁不了</span></div><div class="line">        n ++;</div><div class="line">        <span class="built_in">console</span>.log(n);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn();</div><div class="line">f();<span class="comment">// 13 &gt;&gt; 驻留内存</span></div><div class="line">f();<span class="comment">// 14</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oDiv.innerHTML = <span class="number">0</span>;</div><div class="line">oDiv.style.cssText = <span class="string">"border: 1px solid red;height: 40px;line-height: 40px;text-align: center;font-size: 20px;cursor: pointer;"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line"></div><div class="line"><span class="comment">// oDiv.onclick = function()&#123;</span></div><div class="line"><span class="comment">//     var i = 0;</span></div><div class="line"><span class="comment">//     return function()&#123;</span></div><div class="line"><span class="comment">//         i ++;</span></div><div class="line"><span class="comment">//         oDiv.innerHTML = i;</span></div><div class="line"><span class="comment">//     &#125;;</span></div><div class="line"><span class="comment">// &#125;();</span></div><div class="line"></div><div class="line">oDiv.onclick = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        i ++;</div><div class="line">        oDiv.innerHTML = i;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h4 id="利用innerHTML"><a href="#利用innerHTML" class="headerlink" title="利用innerHTML"></a>利用innerHTML</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 弊端：重新渲染</span></div><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oDiv.innerHTML = <span class="number">0</span>;</div><div class="line">oDiv.style.cssText = <span class="string">"border: 1px solid red;height: 40px;line-height: 40px;text-align: center;font-size: 20px;cursor: pointer;"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// oDiv.innerHTML = parseInt(oDiv.innerHTML) + 1;</span></div><div class="line">    oDiv.innerHTML ++;<span class="comment">// 有默认的转换机制</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="利用自定义属性"><a href="#利用自定义属性" class="headerlink" title="利用自定义属性"></a>利用自定义属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oDiv.innerHTML = <span class="number">0</span>;</div><div class="line">oDiv.style.cssText = <span class="string">"border: 1px solid red;height: 40px;line-height: 40px;text-align: center;font-size: 20px;cursor: pointer;"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line">oDiv.num = <span class="number">0</span>;<span class="comment">// 既不是全局变量也不是私有变量，是自定义属性</span></div><div class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.innerHTML = ++ <span class="keyword">this</span>.num;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="内存释放／垃圾回收-待续，高程3…"><a href="#内存释放／垃圾回收-待续，高程3…" class="headerlink" title="内存释放／垃圾回收(待续，高程3…)"></a>内存释放／垃圾回收(待续，高程3…)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 堆内存：存放引用类型的值</span></div><div class="line"><span class="comment">// 对象数据类型或者函数数据类型在定义的时候都会先开辟一个堆内存，堆内存有一个引用地址，当堆内存被占用(引用)的情况下数销毁不了的</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="comment">// 开一个堆内存，假如地址是xxxfff000，obj1指向该堆内存</span></div><div class="line">    name: <span class="string">"yangk"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = obj1;<span class="comment">// obj2也指向xxxfff000</span></div><div class="line"></div><div class="line"><span class="comment">// 当堆内存没人引用时，浏览器将在空闲的时候将其回收，所以销毁堆内存时我们只需要把引用他的变量赋值为null即可</span></div><div class="line">obj1 = <span class="literal">null</span>;<span class="comment">// 空对象指针，谁都不指</span></div><div class="line">obj2 = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 栈内存(作用域)</span></div><div class="line"><span class="comment">// 全局作用域和私有作用域</span></div><div class="line"></div><div class="line"><span class="comment">// 全局作用域：只有当页面关闭的时候其才销毁</span></div><div class="line"><span class="comment">// 私有作用域：函数执行会产生私有作用域，当私有作用域中的代码执行完成后，当前作用域会进行释放和销毁(闭包除外)</span></div><div class="line"></div><div class="line"><span class="comment">// 当私有作用域中的部分内容被占用的情况下是不能被销毁的</span></div><div class="line"></div><div class="line"><span class="comment">// 不销毁情况：</span></div><div class="line"><span class="comment">// 函数执行返回了一个引用数据类型值，并且被外面一个东西给接受了</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        num ++;</div><div class="line">        <span class="built_in">console</span>.log(num);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn();</div><div class="line">f();<span class="comment">// 101</span></div><div class="line">f();<span class="comment">// 102</span></div><div class="line">fn()();<span class="comment">// 这种情况fn返回的函数没有被占用，但是还需要执行一次，暂时不销毁，当返回的函数执行完成后，浏览器会在空闲的时候将其销毁</span></div><div class="line"><span class="comment">// 私有作用域中给DOM元素的事件绑定方法一般也不销毁</span></div><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);<span class="comment">// 通过DOM方法获取的元素都是对象数据类型的值</span></div><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<h3 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h3><p>看方法名前面是否有点，有的话点前面是谁this就是谁<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">fn</span>:fn</div><div class="line">&#125;;</div><div class="line">fn();<span class="comment">// this &gt; window,严格模式下undefined</span></div><div class="line">obj.fn();<span class="comment">// this &gt; obj</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"yangk"</span>;</div><div class="line">&#125;</div><div class="line">Person.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person;</div><div class="line">p1.showName();<span class="comment">// this &gt; p1</span></div><div class="line">p1.__proto__.showName();<span class="comment">// this &gt; p1.__proto__</span></div><div class="line">Person.prototype.showName();<span class="comment">// this &gt; p1.prototype</span></div></pre></td></tr></table></figure>
<p>自执行函数中的this永远是window，严格模式下是undefined<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">// this &gt; window</span></div><div class="line">&#125;)();</div><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">// this &gt; window</span></div><div class="line">&#125;();</div></pre></td></tr></table></figure></p>
<p>元素的某一个行为绑定一个方法，this &gt; 元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">oDiv.onclick = fn;</div><div class="line">oDiv.onclick = fn();<span class="comment">// 注意这里是执行的返回结果返回！！！！！！undefined</span></div><div class="line"></div><div class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    fn();<span class="comment">// this  &gt;  window</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用call/apply强制改变this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.fn();<span class="comment">// this &gt; obj</span></div><div class="line">obj.fn.call(<span class="number">12</span>);<span class="comment">// this &gt; 12</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">sum.call(<span class="number">100</span>,<span class="number">100.</span>..)<span class="comment">// 第一个参数是this，后面对应接受的形参，没有undefined</span></div><div class="line"></div><div class="line">sum.call();<span class="comment">//在非严格模式下，call的第一个参数不写或者写null/undefined，默认的this都是window，严格模式下写谁就是谁，写null就是null，不写是undefined</span></div><div class="line"></div><div class="line">apply(obj,[...]);</div></pre></td></tr></table></figure>
<h3 id="乘法表"><a href="#乘法表" class="headerlink" title="乘法表"></a>乘法表</h3><h4 id="加换行符实现"><a href="#加换行符实现" class="headerlink" title="加换行符实现"></a>加换行符实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>;i ++)&#123;</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= i;j ++)&#123;</div><div class="line">        <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</div><div class="line">        oSpan.innerHTML = j + <span class="string">"x"</span> + i + <span class="string">"="</span> + i * j + <span class="string">"&amp;nbsp;&amp;nbsp"</span>;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(oSpan);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.body.innerHTML += <span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="利用块元素的机制实现"><a href="#利用块元素的机制实现" class="headerlink" title="利用块元素的机制实现"></a>利用块元素的机制实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>;i ++)&#123;</div><div class="line">    <span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= i;j ++)&#123;</div><div class="line">        oP.innerHTML += j + <span class="string">"x"</span> + i + <span class="string">"="</span> + i * j + <span class="string">"&amp;nbsp;&amp;nbsp"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(oP);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="用字符串拼接的方法实现"><a href="#用字符串拼接的方法实现" class="headerlink" title="用字符串拼接的方法实现"></a>用字符串拼接的方法实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">str += <span class="string">"&lt;ul&gt;"</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>;i ++)&#123;</div><div class="line">    str += <span class="string">"&lt;li&gt;"</span>;</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= i;j ++)&#123;</div><div class="line">        str += j + <span class="string">"x"</span> + i + <span class="string">"="</span> + j * i + <span class="string">"&amp;nbsp;&amp;nbsp;"</span>;</div><div class="line">    &#125;</div><div class="line">    str += <span class="string">"&lt;/li&gt;"</span>;</div><div class="line">&#125;</div><div class="line">str += <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line"><span class="built_in">document</span>.body.innerHTML = str;</div></pre></td></tr></table></figure>
<h3 id="打印个正方形"><a href="#打印个正方形" class="headerlink" title="打印个正方形"></a>打印个正方形</h3><h4 id="浮动实现"><a href="#浮动实现" class="headerlink" title="浮动实现"></a>浮动实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oWrap = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oWrap.style.cssText = <span class="string">"width:400px;height:400px;margin:0 auto;background-color:#eee;"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oWrap);</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrColor = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"pink"</span>,<span class="string">"yellow"</span>,<span class="string">"#ccc"</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i ++)&#123;</div><div class="line">    <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</div><div class="line">    oSpan.style.cssText = <span class="string">"width:40px;height:40px;float:left;background-color:"</span>+ arrColor[i%arrColor.length] +<span class="string">""</span>;</div><div class="line">    oWrap.appendChild(oSpan);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="两个循环定位实现"><a href="#两个循环定位实现" class="headerlink" title="两个循环定位实现"></a>两个循环定位实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oWrap = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oWrap.style.cssText = <span class="string">"width:400px;height:400px;margin:0 auto;background-color:#eee;position:relative;"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oWrap);</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrColor = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"pink"</span>,<span class="string">"yellow"</span>,<span class="string">"#ccc"</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; <span class="number">10</span>;j ++)&#123;</div><div class="line">        <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</div><div class="line">        oSpan.style.cssText = <span class="string">"width:40px;height:40px;float:left;background-color:"</span>+ arrColor[(i * <span class="number">10</span> + j)%arrColor.length] +<span class="string">";position:absolute;left:"</span>+ j * <span class="number">40</span> +<span class="string">"px;top:"</span>+ i % <span class="number">10</span> * <span class="number">40</span> +<span class="string">"px;"</span>;</div><div class="line">        oWrap.appendChild(oSpan);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="一个循环定位实现"><a href="#一个循环定位实现" class="headerlink" title="一个循环定位实现"></a>一个循环定位实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oWrap = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oWrap.style.cssText = <span class="string">"width:400px;height:400px;margin:0 auto;background-color:#eee;position:relative;"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oWrap);</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrColor = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"pink"</span>,<span class="string">"yellow"</span>,<span class="string">"#ccc"</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i ++)&#123;</div><div class="line">    <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</div><div class="line">    oSpan.style.cssText = <span class="string">"width:40px;height:40px;float:left;background-color:"</span>+ arrColor[i % arrColor.length] +<span class="string">";position:absolute;left:"</span>+ i % <span class="number">10</span> * <span class="number">40</span> +<span class="string">"px;top:"</span>+ <span class="built_in">Math</span>.floor(i / <span class="number">10</span>) * <span class="number">40</span> +<span class="string">"px;"</span>;</div><div class="line">    oWrap.appendChild(oSpan);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 倒计时原理：目标时间 - 当前时间</span></div><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oDiv.style.textAlign = <span class="string">"center"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 设定目标时间，把时间格式的字符串转换为标准格式，中杠ie6，7，8不兼容，所以下面用/代替</span></div><div class="line"><span class="keyword">var</span> tarTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2016/12/05 09:30:00"</span>);</div><div class="line"><span class="comment">// 目标时间戳</span></div><div class="line"><span class="keyword">var</span> tarSpan = tarTime.getTime();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 获取现在时间</span></div><div class="line">    <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="comment">// 当前时间戳</span></div><div class="line">    <span class="keyword">var</span> nowSpan = nowTime.getTime();</div><div class="line"></div><div class="line">    <span class="comment">// 求时间戳之差</span></div><div class="line">    <span class="keyword">var</span> diffTime = tarSpan - nowSpan;</div><div class="line"></div><div class="line">    <span class="comment">// 计算小时</span></div><div class="line">    <span class="keyword">var</span> hours = <span class="built_in">Math</span>.floor( diffTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> );</div><div class="line">    <span class="comment">// 上面小时占用的毫秒数</span></div><div class="line">    <span class="keyword">var</span> hoursMs = hours * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line">    <span class="comment">// 剩下的毫秒数</span></div><div class="line">    <span class="keyword">var</span> halfMs = diffTime - hoursMs;</div><div class="line"></div><div class="line">    <span class="comment">// 计算分钟</span></div><div class="line">    <span class="keyword">var</span> minutes = <span class="built_in">Math</span>.floor(halfMs / <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">    <span class="comment">// 上面分钟占用的毫秒数</span></div><div class="line">    <span class="keyword">var</span> minutesMs = minutes * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line">    <span class="comment">// 剩下的毫秒数</span></div><div class="line">    halfMs = halfMs - minutesMs;</div><div class="line"></div><div class="line">    <span class="comment">// 计算秒</span></div><div class="line">    <span class="keyword">var</span> seconds = <span class="built_in">Math</span>.floor(halfMs / <span class="number">1000</span>);</div><div class="line"></div><div class="line">    oDiv.innerHTML = <span class="string">"距离明天上班还有："</span>+ hours +<span class="string">"时"</span>+ minutes +<span class="string">"分"</span>+ seconds +<span class="string">"秒"</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line"></div><div class="line">count();</div><div class="line">setInterval(count,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>注意星期<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">week = <span class="string">"日一二三四五六"</span>.charAt(oDate.getDay());</div><div class="line"><span class="built_in">console</span>.log(week);</div></pre></td></tr></table></figure></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>一个function生命周期：出生，预解释时声明加定义，开辟一个新的内存空间，让函数名存储这个快的地址；生长，函数执行形成私有作用域，里面开始类似window的新一轮与解析，死亡：一般情况下(如果没有返回function)，私有作用域下的代码执行完成后，整个私有作用域就销毁了。</p>
<h4 id="简单的隔N行变色"><a href="#简单的隔N行变色" class="headerlink" title="简单的隔N行变色"></a>简单的隔N行变色</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</div><div class="line"><span class="keyword">var</span> arrColor = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"yellow"</span>,<span class="string">"pink"</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeBg</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; aLi.length;i ++)&#123;</div><div class="line">        aLi[i].style.backgroundColor = arrColor[i % num];</div><div class="line"></div><div class="line">        <span class="keyword">var</span> oldColor = <span class="string">""</span>;</div><div class="line">        aLi[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            oldColor = <span class="keyword">this</span>.style.backgroundColor;</div><div class="line">            <span class="keyword">this</span>.style.backgroundColor = <span class="string">"#ccc"</span>;</div><div class="line">        &#125;;</div><div class="line">        aLi[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.style.backgroundColor = oldColor;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">changeBg(<span class="number">2</span>);</div></pre></td></tr></table></figure>
<h4 id="简单的求和"><a href="#简单的求和" class="headerlink" title="简单的求和"></a>简单的求和</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt;<span class="built_in">arguments</span>.length;i ++)&#123;</div><div class="line">        <span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[i]);<span class="comment">// 两种情况：NaN或者数字</span></div><div class="line">        <span class="keyword">if</span>(<span class="built_in">isNaN</span>(num))&#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        total += num;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(total);</div><div class="line">&#125;</div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="string">"a"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>);</div></pre></td></tr></table></figure>
<h4 id="简单的变色"><a href="#简单的变色" class="headerlink" title="简单的变色"></a>简单的变色</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"white"</span>];</div><div class="line"></div><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.body.style.backgroundColor = arr[num++%arr.length];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="函数的3种角色"><a href="#函数的3种角色" class="headerlink" title="函数的3种角色"></a>函数的3种角色</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数的3中角色互不相关</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">500</span>;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line">Fn.prototype.getX = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</div><div class="line">&#125;;</div><div class="line">Fn.aaa = <span class="number">1000</span>;<span class="comment">// 当做一个普通对象来使用</span></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn;</div><div class="line"><span class="keyword">var</span> res = Fn();<span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(f.num);<span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(f.aaa);<span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(Fn.aaa);<span class="comment">// 1000</span></div></pre></td></tr></table></figure>
<h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><h4 id="找n-m间不重复的随机数"><a href="#找n-m间不重复的随机数" class="headerlink" title="找n-m间不重复的随机数"></a>找n-m间不重复的随机数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 找10 - 100之间不重复的整数10个整数并排序</span></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++)&#123;</div><div class="line">    <span class="comment">// var iNum = Math.round( Math.random() * 90 + 10 );// 在这里定义一旦下面arr[i] == iNum就会陷入死循环</span></div><div class="line">    find();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> iNum = <span class="built_in">Math</span>.round( <span class="built_in">Math</span>.random() * <span class="number">90</span> + <span class="number">10</span> );</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i ++)&#123;<span class="comment">// push之前检查一遍</span></div><div class="line">        <span class="keyword">if</span>(arr[i] == iNum)&#123;</div><div class="line">            find();</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    arr.push(iNum);</div><div class="line">&#125;</div><div class="line"></div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 - num2;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
<h4 id="简单验证码"><a href="#简单验证码" class="headerlink" title="简单验证码"></a>简单验证码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> codeStr = <span class="string">'abcdefghijklmnokqrstuvwxyzABCDEFGHIJKLMNOKQRSTUVWXYZ0123456789'</span>;</div><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">oDiv.style.cssText = <span class="string">"width:80px;text-align:center;line-height:40px;background-color:#000;margin:50px auto;cursor:pointer;color:#fff;-webkit-user-select:none;"</span>;</div><div class="line"><span class="keyword">var</span> iNum = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">n,m</span>)</span>&#123;</div><div class="line">    n = <span class="built_in">Number</span>(n);<span class="comment">// 数字或NaN</span></div><div class="line">    m = <span class="built_in">Number</span>(m);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(n) || <span class="built_in">isNaN</span>(m))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.random();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(n &gt; m)&#123;</div><div class="line">        <span class="keyword">var</span> temp = n;</div><div class="line">        n = m;</div><div class="line">        m = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round( <span class="built_in">Math</span>.random() * (m - n) + n );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rand</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i ++)&#123;</div><div class="line">        iNum = getRandom(<span class="number">0</span>,<span class="number">61</span>);</div><div class="line">        str += codeStr.charAt(iNum);</div><div class="line">    &#125;</div><div class="line">    oDiv.innerHTML = str;</div><div class="line">&#125;</div><div class="line">rand();</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.appendChild(oDiv);</div><div class="line"></div><div class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    rand();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><h4 id="删除相同的"><a href="#删除相同的" class="headerlink" title="删除相同的"></a>删除相同的</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>];</div><div class="line"><span class="comment">// 1 [2,1,3,3,2,4,6,2,6,5,7,4,4,6,2,9,9,8,3,2,7]</span></div><div class="line"><span class="comment">// 2 [1,3,3,2,4,6,2,6,5,7,4,4,6,2,9,9,8,3,2,7]</span></div><div class="line"><span class="comment">// 1 [3,3,2,4,6,2,6,5,7,4,4,6,2,9,9,8,3,2,7]</span></div><div class="line"><span class="comment">// 3 [3,2,4,6,2,6,5,7,4,4,6,2,9,9,8,3,2,7]</span></div><div class="line"><span class="comment">// 3 [2,4,6,2,6,5,7,4,4,6,2,9,9,8,3,2,7]</span></div><div class="line"><span class="comment">// 2 [4,6,2,6,5,7,4,4,6,2,9,9,8,3,2,7]</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i ++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>;j &lt; arr.length;j ++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] == arr[j])&#123;</div><div class="line">            arr.splice(j,<span class="number">1</span>);<span class="comment">// 原有数组变化了</span></div><div class="line">            j --;<span class="comment">// 上面删除以后，后面的索引项都往前提了一位，这会影响我们的计算，所以这里要处理，解决数组塌陷问题</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
<h4 id="根据对象属性名不能等"><a href="#根据对象属性名不能等" class="headerlink" title="根据对象属性名不能等"></a>根据对象属性名不能等</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="string">"yangk"</span>,<span class="string">"yangk"</span>];</div><div class="line"></div><div class="line"><span class="comment">//把数组中的每一项，当做一个新对象的属性名和属性值存起来，在存储的时候判断当前的属性名是否已经存在，存在就代表数组该项重复了，进行删除，否则则代表不重复，直接存储</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i ++)&#123;</div><div class="line">    <span class="keyword">if</span>(obj[arr[i]] == arr[i])&#123;<span class="comment">// 如果有就删除且跳出</span></div><div class="line">        arr.splice(i,<span class="number">1</span>);</div><div class="line">        i --;</div><div class="line">        <span class="keyword">continue</span>;<span class="comment">// 跳出本次循环，也提高了查询次数提高性能</span></div><div class="line">    &#125;</div><div class="line">    obj[arr[i]] = arr[i];</div><div class="line">&#125;</div><div class="line">obj = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
<h4 id="push非重复的"><a href="#push非重复的" class="headerlink" title="push非重复的"></a>push非重复的</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// arr[0] : arr[1]，相当退出内循环，此时j = false</span></div><div class="line"><span class="comment">// arr[1] : arr[2]，arr[1] : arr[3]，发现相等又退出内循环，此时j = false</span></div><div class="line"><span class="comment">// arr[2] : arr[3]，arr[2] : arr[4]，arr[2] : arr[5]发现一切正常，此时i等于2故push: arr[2]，此时j = 6</span></div><div class="line"><span class="comment">// arr[3] : arr[4]，arr[3] : arr[5]，发现相等又退出内循环，此时j = false</span></div><div class="line"><span class="comment">// arr[4] : arr[5]，无异常，push: arr[4]，此时j = 6</span></div><div class="line"><span class="comment">// arr[5] 此时j等于6，push: arr[5]，此时j = 6</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jiayou</span>(<span class="params">arr</span>)</span></div><div class="line">&#123; </div><div class="line">    <span class="keyword">var</span> newArr = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i ++)</div><div class="line">    &#123; </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>;j &lt; arr.length;j ++)</div><div class="line">        &#123; </div><div class="line">            <span class="keyword">if</span>(arr[i] === arr[j])</div><div class="line">            &#123; </div><div class="line">                j = <span class="literal">false</span>;<span class="comment">// 与后面比较完再看j的值</span></div><div class="line">                <span class="keyword">break</span>;<span class="comment">// 直接退出循环</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(i + <span class="string">":"</span> + j);</div><div class="line">        <span class="keyword">if</span>(j)</div><div class="line">        &#123; </div><div class="line">            newArr.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(jiayou(arr));</div></pre></td></tr></table></figure>
<h3 id="找数组最大-最小值"><a href="#找数组最大-最小值" class="headerlink" title="找数组最大/最小值"></a>找数组最大/最小值</h3><h4 id="排序后掐头去尾法"><a href="#排序后掐头去尾法" class="headerlink" title="排序后掐头去尾法"></a>排序后掐头去尾法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">33</span>,<span class="number">73</span>,<span class="number">23</span>,<span class="number">13</span>,<span class="number">9</span>];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a - b;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> min = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> max = arr[arr.length - <span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(min,max);</div></pre></td></tr></table></figure>
<h4 id="假设法"><a href="#假设法" class="headerlink" title="假设法"></a>假设法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">33</span>,<span class="number">73</span>,<span class="number">23</span>,<span class="number">13</span>,<span class="number">9</span>];</div><div class="line"><span class="comment">// 假设法：先假设一个是最小值，然后和数组后面的每一项进行比较，如果比我们的当前值还要小，说明假设错误，把当前值赋值给假设值，最大值同理！</span></div><div class="line"><span class="keyword">var</span> min = max = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length;i ++)&#123;</div><div class="line">    arr[i] &lt; min ? min = arr[i] : <span class="literal">null</span>;</div><div class="line">    arr[i] &gt; max ? max = arr[i] : <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(min,max);</div></pre></td></tr></table></figure>
<h4 id="eval-法"><a href="#eval-法" class="headerlink" title="eval()法"></a>eval()法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">33</span>,<span class="number">73</span>,<span class="number">23</span>,<span class="number">13</span>,<span class="number">9</span>];</div><div class="line"></div><div class="line"><span class="comment">/*var aaa = arr.toString();// 数组转字符串，也可以用join转</span></div><div class="line">var bbb = eval(aaa);// 字符串转表达式，保留的是最后一项的结果还是不行</div><div class="line">// 括号表达式：一个括号中放多项值，中间用逗号隔开，最后获取的只有最后一项，例如(33,73,23,13,9)返回的结果是9</div><div class="line">console.log(Math.max(bbb));// 结果是9，所以这种方式行不通*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> min = <span class="built_in">eval</span>(<span class="string">"Math.min("</span>+ arr.toString() +<span class="string">")"</span>);</div><div class="line"><span class="keyword">var</span> max = <span class="built_in">eval</span>(<span class="string">"Math.max("</span>+ arr.toString() +<span class="string">")"</span>);</div><div class="line"><span class="built_in">console</span>.log(min,max);</div></pre></td></tr></table></figure>
<p>关于括号表达式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.fn = fn;</div><div class="line">(fn,obj.fn)();<span class="comment">// 一个括号中出现多项内容中间用逗号隔开，取最后，是直接把内容复制一份一模一样的放进来(理解this)，所以这里的this是window</span></div><div class="line">(obj.fn)();<span class="comment">// 只有一项时，this是obj，只有一项加不加小括号无所谓</span></div></pre></td></tr></table></figure></p>
<h4 id="Math-max-apply-法"><a href="#Math-max-apply-法" class="headerlink" title="Math.max.apply()法"></a>Math.max.apply()法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// apply，虽然传递的是一个数组，但是也相当于一个个传递参数，利用这个原理：</span></div><div class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr);</div><div class="line"><span class="built_in">console</span>.log(max);</div></pre></td></tr></table></figure>
<h3 id="平均数"><a href="#平均数" class="headerlink" title="平均数"></a>平均数</h3><h4 id="一般写法"><a href="#一般写法" class="headerlink" title="一般写法"></a>一般写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">avgFn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//arguments.sort();// 类数组不能直接sort</span></div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">arguments</span>.length;i ++)&#123;</div><div class="line">        arr[arr.length] = <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    arr.shift();<span class="comment">// 删头</span></div><div class="line">    arr.pop();<span class="comment">// 删尾</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i ++)&#123;</div><div class="line">        total += arr[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (total / arr.length).toFixed(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> res = avgFn(<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(res);</div></pre></td></tr></table></figure>
<h4 id="求和优化"><a href="#求和优化" class="headerlink" title="求和优化"></a>求和优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">avgFn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//arguments.sort();// 类数组不能直接sort</span></div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">arguments</span>.length;i ++)&#123;</div><div class="line">        arr[arr.length] = <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    arr.shift();</div><div class="line">    arr.pop();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="built_in">eval</span>(arr.join(<span class="string">"+"</span>)) / arr.length).toFixed(<span class="number">2</span>);<span class="comment">// 求和</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> res = avgFn(<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(res);</div></pre></td></tr></table></figure>
<h4 id="类数组转数组优化"><a href="#类数组转数组优化" class="headerlink" title="类数组转数组优化"></a>类数组转数组优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Array.prototype.slice = function()&#123;</span></div><div class="line"><span class="comment">//     var arr = [];</span></div><div class="line"><span class="comment">//     // this就是我们想要操作的那个数组</span></div><div class="line"><span class="comment">//     for(var i = 0;i &lt; this.length;i++)&#123;</span></div><div class="line"><span class="comment">//         arr[arr.length] = this[i];</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">//     // 让this变成arguments就实现arguments转数组了</span></div><div class="line"><span class="comment">//     // for(var i = 0;i &lt; arguments.length;i ++)&#123;</span></div><div class="line"><span class="comment">//     //     arr[arr.length] = arguments[i];</span></div><div class="line"><span class="comment">//     // &#125;</span></div><div class="line"><span class="comment">//     return arr;</span></div><div class="line"><span class="comment">// &#125;;</span></div><div class="line"><span class="comment">// [12,23,34].slice();</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">avgFn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="comment">//[].slice.call(arguments,0)// 实例也有slice方法和上面一样的事，0可传可不传</span></div><div class="line">    <span class="comment">//[].__proto__.slice.call(...)// ie不兼容</span></div><div class="line">    <span class="comment">//[].slice.apply[arguments,[0]]</span></div><div class="line">    </div><div class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;).shift();</div><div class="line"></div><div class="line">    arr.length --;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="built_in">eval</span>(arr.join(<span class="string">"+"</span>)) / arr.length).toFixed(<span class="number">2</span>);<span class="comment">// 求和</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> res = avgFn(<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(res);</div></pre></td></tr></table></figure>
<h4 id="换个姿势"><a href="#换个姿势" class="headerlink" title="换个姿势"></a>换个姿势</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// arguments可以通过下面方式使用数组中的所有方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">avgFn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    [].sort.call(<span class="built_in">arguments</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;);</div><div class="line">    [].shift.call(<span class="built_in">arguments</span>);</div><div class="line">    [].pop.call(<span class="built_in">arguments</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (<span class="built_in">eval</span>([].join.call(<span class="built_in">arguments</span>,<span class="string">"+"</span>)) / <span class="built_in">arguments</span>.length).toFixed(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> res = avgFn(<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(res);</div></pre></td></tr></table></figure>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="找一个节点下的子节点"><a href="#找一个节点下的子节点" class="headerlink" title="找一个节点下的子节点"></a>找一个节点下的子节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChild</span>(<span class="params">oParent,tagName</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">var</span> aTag = oParent.childNodes;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; aTag.length;i ++)&#123;</div><div class="line">        <span class="keyword">if</span>(aTag[i].nodeType == <span class="number">1</span>)&#123;<span class="comment">// 元素节点</span></div><div class="line">            <span class="keyword">if</span>(tagName)&#123;<span class="comment">// 有限定子节点的话</span></div><div class="line">                <span class="keyword">if</span>(aTag[i].nodeName.toLowerCase() === tagName)&#123;</div><div class="line">                    arr.push(aTag[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;<span class="comment">// 那就找出所有的子元素节点</span></div><div class="line">                arr.push(aTag[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.querySelector(<span class="string">"#ul1"</span>);</div><div class="line"><span class="built_in">console</span>.log(getChild(oUl));</div></pre></td></tr></table></figure>
<h4 id="找上一个元素节点"><a href="#找上一个元素节点" class="headerlink" title="找上一个元素节点"></a>找上一个元素节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</div><div class="line"><span class="keyword">var</span> pre = oDiv.previousSibling;</div><div class="line"><span class="keyword">while</span>(pre &amp;&amp; pre.nodeType !== <span class="number">1</span>)&#123;</div><div class="line">    pre = pre.previousSibling;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(pre);</div></pre></td></tr></table></figure>
<h4 id="找上N个元素节点"><a href="#找上N个元素节点" class="headerlink" title="找上N个元素节点"></a>找上N个元素节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</div><div class="line"><span class="keyword">var</span> pre = oDiv.previousSibling;</div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">while</span>(pre)&#123;</div><div class="line">    <span class="keyword">if</span>(pre.nodeType === <span class="number">1</span>)&#123;</div><div class="line">        arr.push(pre);</div><div class="line">    &#125;</div><div class="line">    pre = pre.previousSibling;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'yangkkk'</span>;</div><div class="line"></div><div class="line">str.length;</div><div class="line"></div><div class="line">str.charAt(<span class="number">0</span>);<span class="comment">// 获取指定索引对应的字符</span></div><div class="line"></div><div class="line">str.charCodeAt(<span class="number">0</span>);<span class="comment">// 索引位置字符对应的ASCII码值</span></div><div class="line"></div><div class="line">str.substr(n,m);<span class="comment">// 索引n(包括n)开始截取 m个 字符</span></div><div class="line"></div><div class="line">str.substring(n,m);<span class="comment">// 从索引n找到m(不包括m)处</span></div><div class="line"></div><div class="line">str.slice(n,m);<span class="comment">// 和substring()一样，支持负数作为索引，例如splice(-10)</span></div><div class="line"></div><div class="line">str.indexOf(字符);<span class="comment">// 获取指定字符在对应字符串中第一次出现的索引和charAt()相反</span></div><div class="line"></div><div class="line">lastIndexOf(字符);<span class="comment">// 获取字符在字符串中最后一次出现的位置，如果没有返回-1</span></div><div class="line"></div><div class="line">str.toLowerCase();</div><div class="line"></div><div class="line">toUpperCase();</div><div class="line"></div><div class="line">str.replace(旧字符，新字符);<span class="comment">// 配合正则使用较好</span></div><div class="line">str.replace(<span class="string">'k'</span>,<span class="string">"o"</span>).replace(<span class="string">'k'</span>,<span class="string">"o"</span>).replace(<span class="string">'k'</span>,<span class="string">"o"</span>);</div><div class="line">str.replace(<span class="regexp">/k/g</span>,<span class="string">"o"</span>);</div><div class="line"></div><div class="line">str.split(<span class="string">""</span>)<span class="comment">//变成数组</span></div></pre></td></tr></table></figure>
<h4 id="时间转换"><a href="#时间转换" class="headerlink" title="时间转换"></a>时间转换</h4><p>主要用到String的split()方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> time = <span class="string">"2016-12-10 12:45:3"</span>;<span class="comment">// 转成：2016年12月10日 12时45分03秒</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = time.split(<span class="string">" "</span>);<span class="comment">// 字符串按空格拆分成数组</span></div><div class="line"><span class="keyword">var</span> arrLeft = arr[<span class="number">0</span>].split(<span class="string">"-"</span>);<span class="comment">// 数组中的字符串按-拆分成数组</span></div><div class="line"><span class="keyword">var</span> arrRight = arr[<span class="number">1</span>].split(<span class="string">":"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> leftStr = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> rightStr = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> l = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> r = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arrLeft.length;i ++)&#123;</div><div class="line">    <span class="keyword">switch</span>(i)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            l = <span class="string">"年"</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            l = <span class="string">"月"</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            l = <span class="string">"日"</span>;</div><div class="line">    &#125;</div><div class="line">    leftStr += arrLeft[i] + l;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arrRight.length;i ++)&#123;</div><div class="line">    <span class="keyword">switch</span>(i)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            r = <span class="string">"时"</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            r = <span class="string">"分"</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            r = <span class="string">"秒"</span>;</div><div class="line">    &#125;</div><div class="line">    rightStr += arrRight[i] + r;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(leftStr + <span class="string">" "</span> + rightStr);</div></pre></td></tr></table></figure></p>
<h3 id="Array常用方法"><a href="#Array常用方法" class="headerlink" title="Array常用方法"></a>Array常用方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// push:返回新数组的长度，原来数组改变</span></div><div class="line"><span class="comment">// unshift:数组开头增加，返回改变后的长度，原来数组改变</span></div><div class="line"><span class="comment">// pop:不穿参数，删除数组最后一个，返回删除的内容，返回类型和删除内容类型一样，原来数组改变</span></div><div class="line"><span class="comment">// shift:不传参数，删除数组第一个，返回删除的内容，返回类型和删除内容类型一样，原来数组改变</span></div><div class="line"></div><div class="line"><span class="comment">// splice(n,0,x):向数组中索引为n的前面添加新的内容，返回空数组，原来数组改变</span></div><div class="line"><span class="comment">// splice(n,m):从索引n（包含n）开始删除m个元素，把删除的内容当作新的数组返回，原来数组改变</span></div><div class="line"><span class="comment">// splice(n,m,x):从索引n开始删除m个元素，用x替换删除的，把删除的内容当作新的数组返回，原来数组改变</span></div><div class="line"></div><div class="line"><span class="comment">// splice(0,0,x)   &gt;&gt;  unshift</span></div><div class="line"><span class="comment">// splice(arr.length,0,x)  &gt;&gt;  push</span></div><div class="line"><span class="comment">// splice(arr.length-1,1)  &gt;&gt;  pop</span></div><div class="line"><span class="comment">// splice(0,1) &gt;&gt;  shift</span></div><div class="line"><span class="comment">// 注意以上虽然功效一样，但返回的内容是不一样的</span></div><div class="line"></div><div class="line"><span class="comment">// slice(n,m):从索引n（包含n）开始，找到索引m处（不含m），找到内容作为一个新数组返回，原有数组不变</span></div><div class="line"><span class="comment">// slice(n):从n找到末尾</span></div><div class="line"><span class="comment">// slice(0)或slice():将原来数组原封不动的复制一份</span></div><div class="line"></div><div class="line"><span class="comment">// concat:数组与数组的拼接，例如arr1.concat(arr2)</span></div><div class="line"></div><div class="line"><span class="comment">// toString:将对象转换为字符串，把数组中每一项拿出来用逗号隔开拼接为一个字符串，原有数组不变</span></div><div class="line"></div><div class="line"><span class="comment">// join(分隔符):将对象转换为字符串，把数组中每一项拿出来用逗号隔开拼接为一个字符串，原有数组不变</span></div><div class="line"><span class="comment">// 例如实现数组所有数字相加：eval(arr.join("+"))</span></div><div class="line"></div><div class="line"><span class="comment">// reverse:返回反转后的数组，原有数组改变</span></div><div class="line"></div><div class="line"><span class="comment">// sort:排序，直接写sort只能处理10以内的数字，处理所有的传参数，是利用冒泡排序的思想实现的</span></div><div class="line"></div><div class="line"><span class="comment">// 常用但不兼容的几个方法(待续)：</span></div><div class="line"><span class="comment">// indexOf()</span></div><div class="line"><span class="comment">// forEach()</span></div><div class="line"><span class="comment">// map()</span></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 冒泡排序：当前项和后一项进行比较，如果当前项 &gt; 后一项，两者交换位置</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="comment">// [10,12,13,8,4]</span></div><div class="line"><span class="comment">// [10,12,13,8,4]</span></div><div class="line"><span class="comment">// [10,12,8,13,4]</span></div><div class="line"><span class="comment">// [10,12,8,4,13]</span></div><div class="line"></div><div class="line"><span class="comment">// [10,12,8,4,13]</span></div><div class="line"><span class="comment">// [10,8,12,4,13]</span></div><div class="line"><span class="comment">// [10,8,4,12,13]</span></div><div class="line"></div><div class="line"><span class="comment">// [8,10,4,12,13]</span></div><div class="line"><span class="comment">// [8,4,10,12,13]</span></div><div class="line"></div><div class="line"><span class="comment">// [4,8,10,12,13]</span></div><div class="line"></div><div class="line"><span class="comment">// 每一轮都将最大的放在后面，比较arr.length - 1轮，每一轮又比较arr.length - 1 - i次</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span>(<span class="params">arr,type</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span>;i ++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> - i;j ++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</div><div class="line">                <span class="keyword">var</span> temp = arr[j];</div><div class="line">                arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">                arr[j + <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    type == <span class="number">1</span> ? arr.reverse() : <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sortArr(arr,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
<h3 id="表格排序原理"><a href="#表格排序原理" class="headerlink" title="表格排序原理"></a>表格排序原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.querySelector(<span class="string">"#ul1"</span>);</div><div class="line"><span class="keyword">var</span> aLi = <span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 类数组转数组</span></div><div class="line"><span class="keyword">var</span> newAli = [].slice.call(aLi);</div><div class="line"><span class="comment">// 排序数组</span></div><div class="line">newAli.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(a.innerHTML) - <span class="built_in">parseInt</span>(b.innerHTML);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// appendChild</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; newAli.length;i ++)&#123;</div><div class="line">    oUl.appendChild(newAli[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据类型检测"><a href="#数据类型检测" class="headerlink" title="数据类型检测"></a>数据类型检测</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><h4 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h4><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON是一种数据格式，主要用于前后台交互时作为数据的载体<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [</div><div class="line">    &#123;<span class="string">"name"</span>:<span class="string">"yangk"</span>&#125;,</div><div class="line">    &#123;<span class="string">"age"</span>:<span class="string">"24"</span>&#125;</div><div class="line">];</div><div class="line"><span class="comment">// 把JSON格式的数组转换为JSON格式的字符串</span></div><div class="line"><span class="keyword">var</span> str = <span class="built_in">window</span>.JSON.stringify(arr);<span class="comment">// 转为JSON格式的字符串，window可不加</span></div><div class="line"></div><div class="line"><span class="comment">// 把JSON格式的字符串转换为JSON格式的数组/对象</span></div><div class="line"><span class="keyword">var</span> jsonArr = <span class="built_in">JSON</span>.parse(str);</div><div class="line"><span class="built_in">console</span>.log(jsonArr);<span class="comment">// 数组格式的</span></div><div class="line"></div><div class="line"><span class="comment">// ie6-7不兼容JSON，可以下面方法实现</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'[&#123;"name":"yangk"&#125;,&#123;"age":"24"&#125;]'</span>;</div><div class="line"><span class="keyword">var</span> jsonArr = <span class="built_in">eval</span>(<span class="string">"("</span>+ str +<span class="string">")"</span>);</div><div class="line"><span class="built_in">console</span>.log(jsonArr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</div></pre></td></tr></table></figure></p>
<h3 id="中文排序"><a href="#中文排序" class="headerlink" title="中文排序"></a>中文排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">"菜花"</span>,<span class="attr">age</span>: <span class="number">24</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">"狗蛋"</span>,<span class="attr">age</span>: <span class="number">30</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">"美丽"</span>,<span class="attr">age</span>: <span class="number">21</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">"郑红"</span>,<span class="attr">age</span>: <span class="number">38</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">"拴住"</span>,<span class="attr">age</span>: <span class="number">17</span>&#125;</div><div class="line">];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a.name.localeCompare(b.name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="常用方法封装"><a href="#常用方法封装" class="headerlink" title="常用方法封装"></a>常用方法封装</h3><h4 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice"></a>Array.prototype.slice</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToArray</span>(<span class="params">likeArr</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        arr = <span class="built_in">Array</span>.prototype.slice.call(likeArr);<span class="comment">// [].slice，ie低版本不兼容</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>(e)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; likeArr.length;i ++)&#123;</div><div class="line">            arr[arr.length] = likeArr[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 把JSON格式的字符串转换为JSON格式的数组/对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toJSON</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"JSON"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="built_in">JSON</span>.parse(str) : <span class="built_in">eval</span>(<span class="string">"("</span>+ str +<span class="string">")"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="题目-技巧"><a href="#题目-技巧" class="headerlink" title="题目/技巧"></a>题目/技巧</h3><h4 id="求值"><a href="#求值" class="headerlink" title="求值"></a>求值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i ++)&#123;</div><div class="line">    <span class="keyword">if</span>(i &lt;= <span class="number">5</span>)&#123;</div><div class="line">        i += <span class="number">1</span>;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        i += <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(j &lt; <span class="number">5</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(j &lt;= <span class="number">5</span>)&#123;</div><div class="line">        j += <span class="number">1</span>;</div><div class="line">        j ++;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        j += <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(j);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++)&#123;<span class="comment">// 5 ++</span></div><div class="line">    <span class="keyword">if</span>(i &lt;= <span class="number">5</span>)&#123;</div><div class="line">        i += <span class="number">2</span>;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    i += <span class="number">3</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">10</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(n + (++ i));</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn();</div><div class="line">f(<span class="number">10</span>);<span class="comment">// 21</span></div><div class="line">f(<span class="number">20</span>);<span class="comment">// 32</span></div><div class="line">fn()(<span class="number">10</span>);<span class="comment">// 21</span></div><div class="line">fn()(<span class="number">20</span>);<span class="comment">// 31</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(n + i ++);<span class="comment">// 先执行i ++</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn(<span class="number">13</span>);</div><div class="line">f(<span class="number">12</span>);<span class="comment">// 25</span></div><div class="line">f(<span class="number">14</span>);<span class="comment">// 28</span></div><div class="line">fn(<span class="number">15</span>)(<span class="number">12</span>);<span class="comment">// 27</span></div><div class="line">fn(<span class="number">16</span>)(<span class="number">13</span>);<span class="comment">// 29</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">num</span>: <span class="number">30</span>,</div><div class="line">    <span class="attr">fn</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;<span class="comment">// fn是自执行函数的返回结果，即return后面的函数</span></div><div class="line">        <span class="keyword">this</span>.num *= <span class="number">3</span>;<span class="comment">// 自执行函数的this永远是window，所以window下的num = 60</span></div><div class="line">        num += <span class="number">15</span>;<span class="comment">// 35</span></div><div class="line">        <span class="keyword">var</span> num = <span class="number">45</span>;<span class="comment">// 形参已经有了就不重新声明了，直接等于45</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.num *= <span class="number">4</span>;<span class="comment">// this是window，结果是240</span></div><div class="line">            num += <span class="number">20</span>;<span class="comment">// 上级作用域45 + 20 = 65</span></div><div class="line">            <span class="built_in">console</span>.log(num);</div><div class="line">        &#125;;</div><div class="line">    &#125;)(num)<span class="comment">// 20</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> fn = obj.fn;<span class="comment">// return的函数</span></div><div class="line">fn();<span class="comment">// 65</span></div><div class="line"><span class="comment">//fn();// 85</span></div><div class="line">obj.fn();<span class="comment">// 85，这里执行后上面this.num *= 4结果是120</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.num,obj.num);<span class="comment">// 240,120</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> number = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">number</span>: <span class="number">4</span>,</div><div class="line">    <span class="attr">fn1</span>: (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.number *= <span class="number">2</span>;<span class="comment">// 闭包形式的this &gt;&gt; window</span></div><div class="line">        number = number * <span class="number">2</span>;<span class="comment">// 只声明没定义undefined * 2</span></div><div class="line">        <span class="built_in">console</span>.log(number);<span class="comment">// NaN</span></div><div class="line">        <span class="keyword">var</span> number = <span class="number">3</span>;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// return 给fn1，必包有return不销毁</span></div><div class="line">            <span class="keyword">this</span>.number *= <span class="number">2</span>;<span class="comment">// this &gt;&gt; window 8</span></div><div class="line">            number *= <span class="number">3</span>;<span class="comment">// 找没有销毁的必包中的变量 9</span></div><div class="line">            alert(number);<span class="comment">// </span></div><div class="line">        &#125;<span class="comment">//这个匿名方法返回这个函数，fn1最终就是这个函数</span></div><div class="line">    &#125;)()<span class="comment">//这个匿名函数运行就是一个必包</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> fn1 = obj.fn1;<span class="comment">// NaN</span></div><div class="line">alert(number);<span class="comment">// 4</span></div><div class="line">fn1();<span class="comment">// 9.........window</span></div><div class="line"></div><div class="line">obj.fn1(); <span class="comment">// 27............obj</span></div><div class="line">alert(<span class="built_in">window</span>.number);<span class="comment">// 8</span></div><div class="line">alert(obj.number);<span class="comment">// 8</span></div></pre></td></tr></table></figure>
<h4 id="typeof-1"><a href="#typeof-1" class="headerlink" title="typeof"></a>typeof</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="keyword">typeof</span> []);</div></pre></td></tr></table></figure>
<h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">num &gt; <span class="number">0</span> ? <span class="built_in">console</span>.log(<span class="string">"yes"</span>) : <span class="keyword">void</span> <span class="number">0</span>;<span class="comment">// 不符合条件又没内容返回时可以这样写就是返回undefined</span></div></pre></td></tr></table></figure>
<h4 id="for-in循环顺序问题"><a href="#for-in循环顺序问题" class="headerlink" title="for in循环顺序问题"></a>for in循环顺序问题</h4><p>for in循环的顺序问题：首先循环数字的属性名(从小到大)，再按我们写的顺序循环其他的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"yangk"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">25</span>,</div><div class="line">    <span class="number">1</span>: <span class="number">10086</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">    <span class="built_in">console</span>.log(obj[key]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="JS中的6个假值"><a href="#JS中的6个假值" class="headerlink" title="JS中的6个假值"></a>JS中的6个假值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">false</span>、<span class="literal">null</span>、<span class="literal">undefined</span>、<span class="number">0</span>、<span class="string">""</span>、<span class="literal">NaN</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript学习中一些零碎笔记，持续更新…&lt;br&gt;
    
    </summary>
    
    
      <category term="JS基础知识" scheme="http://wwww.yesokiloveyou.com/tags/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>React初探</title>
    <link href="http://wwww.yesokiloveyou.com/2016/11/23/note-react/"/>
    <id>http://wwww.yesokiloveyou.com/2016/11/23/note-react/</id>
    <published>2016-11-23T13:29:01.000Z</published>
    <updated>2016-11-28T15:58:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一个React程序"><a href="#第一个React程序" class="headerlink" title="第一个React程序"></a>第一个React程序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React 核心库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React DOM 库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Babel 编译器，将 JSX 变成 JavaScript --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> destination = <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>);</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">        destination</div><div class="line">    );</div><div class="line">    <span class="comment">/*ReactDOM.render(React.createElement(</span></div><div class="line">        "h1",</div><div class="line">        null,</div><div class="line">        "Hello World"</div><div class="line">    ), destination);*/</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React 核心库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React DOM 库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Babel 编译器，将 JSX 变成 JavaScript --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="xml"></span></div><div class="line">    &#123;/* 定义 */&#125;</div><div class="line">    var HelloWorld = React.createClass(&#123;</div><div class="line">        render: function() &#123;</div><div class="line">            return (</div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;this.props.greetTarget&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            &#123;/* 调用 */&#125;</div><div class="line">            <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">greetTarget</span>=<span class="string">"Batman"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">greetTarget</span>=<span class="string">"Iron Man"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">greetTarget</span>=<span class="string">"Nicolas Cage"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">greetTarget</span>=<span class="string">"Mega Man"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">greetTarget</span>=<span class="string">"Bono"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">greetTarget</span>=<span class="string">"Catwoman"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">        document.querySelector("#container")</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在组件调用中也可以放子元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React 核心库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React DOM 库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Babel 编译器，将 JSX 变成 JavaScript --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Buttonify = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#123;this.props.behavior&#125;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);   </div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">Buttonify</span> <span class="attr">behavior</span>=<span class="string">"Submit"</span>&gt;</span>SEND DATA<span class="tag">&lt;/<span class="name">Buttonify</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>)</div><div class="line">    );    </div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="React中设置样式"><a href="#React中设置样式" class="headerlink" title="React中设置样式"></a>React中设置样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React 核心库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React DOM 库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Babel 编译器，将 JSX 变成 JavaScript --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Letter = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> letterStyle = &#123;</div><div class="line">              <span class="attr">padding</span>: <span class="number">10</span>,</div><div class="line">              <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">              <span class="attr">backgroundColor</span>: <span class="keyword">this</span>.props.bgcolor,</div><div class="line">              <span class="attr">color</span>: <span class="string">"#333"</span>,</div><div class="line">              <span class="attr">display</span>: <span class="string">"inline-block"</span>,</div><div class="line">              <span class="attr">fontFamily</span>: <span class="string">"monospace"</span>,</div><div class="line">              <span class="attr">fontSize</span>: <span class="string">"32px"</span>,</div><div class="line">              <span class="attr">textAlign</span>: <span class="string">"center"</span></div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;letterStyle&#125;</span>&gt;</span></span></div><div class="line">                    &#123;this.props.children&#125;</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> destination = <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>);</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">Letter</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">Letter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Letter</span> <span class="attr">bgcolor</span>=<span class="string">"green"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">Letter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Letter</span> <span class="attr">bgcolor</span>=<span class="string">"blue"</span>&gt;</span>I<span class="tag">&lt;/<span class="name">Letter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Letter</span> <span class="attr">bgcolor</span>=<span class="string">"black"</span>&gt;</span>O<span class="tag">&lt;/<span class="name">Letter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Letter</span> <span class="attr">bgcolor</span>=<span class="string">"pink"</span>&gt;</span>U<span class="tag">&lt;/<span class="name">Letter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">        destination</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="创建复杂的组件"><a href="#创建复杂的组件" class="headerlink" title="创建复杂的组件"></a>创建复杂的组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React 核心库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- React DOM 库 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Babel 编译器，将 JSX 变成 JavaScript --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="xml"></span></div><div class="line">    var Card = React.createClass(&#123;</div><div class="line">        render: function() &#123;</div><div class="line">            var cardStyle = &#123;</div><div class="line">                height: 200,</div><div class="line">                width: 150,</div><div class="line">                padding: 0,</div><div class="line">                backgroundColor: "#FFF",</div><div class="line">                WebkitFilter: "drop-shadow(0px 0px 5px #666)",</div><div class="line">                filter: "drop-shadow(0px 0px 5px #666)"</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            return (</div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;cardStyle&#125;</span>&gt;</span></div><div class="line">                    &#123;/* 组件内部也可以调用组件 */&#125;</div><div class="line">                    &#123;/* 一级一级的向上找 */&#125;</div><div class="line">                    <span class="tag">&lt;<span class="name">Square</span> <span class="attr">color</span>=<span class="string">&#123;this.props.color&#125;/</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Label</span> <span class="attr">color</span>=<span class="string">&#123;this.props.color&#125;/</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    &#123;/* 上 */&#125;</div><div class="line">    var Square = React.createClass(&#123;</div><div class="line">        render: function() &#123;</div><div class="line">            &#123;/* 一级一级的向上找 */&#125;</div><div class="line">            var squareStyle = &#123;</div><div class="line">                height: 150,</div><div class="line">                backgroundColor: this.props.color</div><div class="line">            &#125;;</div><div class="line">            return(</div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;squareStyle&#125;</span>&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    &#123;/* 下 */&#125;</div><div class="line">    var Label = React.createClass(&#123;</div><div class="line">        render: function() &#123;</div><div class="line">            var labelStyle = &#123;</div><div class="line">                fontFamily: "sans-serif",</div><div class="line">                fontWeight: "bold",</div><div class="line">                padding: 13,</div><div class="line">                margin: 0</div><div class="line">            &#125;;</div><div class="line">            &#123;/* 一级一级的向上找 */&#125;</div><div class="line">            return (</div><div class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;labelStyle&#125;</span>&gt;</span>&#123;this.props.color&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            &#123;/* 夷，找到啦 */&#125;</div><div class="line">            <span class="tag">&lt;<span class="name">Card</span> <span class="attr">color</span>=<span class="string">"#FF6663"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">        document.querySelector("#container")</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="传递属性"><a href="#传递属性" class="headerlink" title="传递属性"></a>传递属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> Display = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            &#123;<span class="comment">/* 返回真正结果 */</span>&#125;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.color&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.size&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Label = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            &#123;<span class="comment">/* 调用 Display */</span>&#125;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                &lt;Display &#123;...this.props&#125;/&gt;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    var Shirt = React.createClass(&#123;</div><div class="line">        render: function() &#123;</div><div class="line">            &#123;/* 调用 Label */&#125;</div><div class="line">            return (</div><div class="line">                &lt;Label &#123;...this.props&#125;/&gt;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">        &lt;div&gt;</div><div class="line">            &#123;/* 调用 Shirt */&#125;</div><div class="line">            &lt;Shirt color="steelblue" num="3.14" size="medium" /&gt;</div><div class="line">        &lt;/div&gt;,</div><div class="line">        document.querySelector("#container")</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="处理状态"><a href="#处理状态" class="headerlink" title="处理状态"></a>处理状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> LightningCounter = React.createClass(&#123;</div><div class="line">        <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">strikes</span>: <span class="number">0</span></div><div class="line">            &#125;;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">timerTick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            &#123;<span class="comment">/* 调用 setState 并更新 state 对象中一些东西，render 方法也会被自动调用 */</span>&#125;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">strikes</span>: <span class="keyword">this</span>.state.strikes + <span class="number">100</span></div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            &#123;<span class="comment">/* componentDidMount 方法在 React 组件渲染以后将被自动调用 */</span>&#125;</div><div class="line">            setInterval(<span class="keyword">this</span>.timerTick, <span class="number">1000</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.strikes&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> LightningCounterDisplay = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> divStyle = &#123;</div><div class="line">                <span class="attr">width</span>: <span class="number">250</span>,</div><div class="line">                <span class="attr">textAlign</span>: <span class="string">"center"</span>,</div><div class="line">                <span class="attr">backgroundColor</span>: <span class="string">"black"</span>,</div><div class="line">                <span class="attr">padding</span>: <span class="number">40</span>,</div><div class="line">                <span class="attr">fontFamily</span>: <span class="string">"sans-serif"</span>,</div><div class="line">                <span class="attr">color</span>: <span class="string">"#999"</span>,</div><div class="line">                <span class="attr">borderRadius</span>: <span class="number">10</span></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">return</span>(</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;divStyle&#125;</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;<span class="name">LightningCounter</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">LightningCounterDisplay</span>/&gt;</span></span>,</div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>)</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="从数据到UI"><a href="#从数据到UI" class="headerlink" title="从数据到UI"></a>从数据到UI</h3><p>显示一个圆<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> Circle = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> circleStyle = &#123;</div><div class="line">                <span class="attr">padding</span>: <span class="number">10</span>,</div><div class="line">                <span class="attr">margin</span>: <span class="number">20</span>,</div><div class="line">                <span class="attr">display</span>: <span class="string">"inline-block"</span>,</div><div class="line">                <span class="attr">backgroundColor</span>: <span class="keyword">this</span>.props.bgcolor,</div><div class="line">                <span class="attr">borderRadius</span>: <span class="string">"50%"</span>,</div><div class="line">                <span class="attr">width</span>: <span class="number">100</span>,</div><div class="line">                <span class="attr">height</span>: <span class="number">100</span>,</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;circleStyle&#125;</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> destination = <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showCircle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> colors = [<span class="string">"#393E41"</span>, <span class="string">"#E94F37"</span>, <span class="string">"#1C89BF"</span>, <span class="string">"#A1D363"</span>];</div><div class="line">        <span class="keyword">var</span> ran = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * colors.length);</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Circle</span> <span class="attr">bgcolor</span>=<span class="string">&#123;colors[ran]&#125;/</span>&gt;</span>;</span></div><div class="line">    &#125;;</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            &#123;showCircle()&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">        destination</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>显示多个圆<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> Circle = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> circleStyle = &#123;</div><div class="line">                <span class="attr">padding</span>: <span class="number">10</span>,</div><div class="line">                <span class="attr">margin</span>: <span class="number">20</span>,</div><div class="line">                <span class="attr">display</span>: <span class="string">"inline-block"</span>,</div><div class="line">                <span class="attr">backgroundColor</span>: <span class="keyword">this</span>.props.bgcolor,</div><div class="line">                <span class="attr">borderRadius</span>: <span class="string">"50%"</span>,</div><div class="line">                <span class="attr">width</span>: <span class="number">100</span>,</div><div class="line">                <span class="attr">height</span>: <span class="number">100</span>,</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;circleStyle&#125;</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> destination = <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>);</div><div class="line">    <span class="keyword">var</span> colors = [<span class="string">"#393E41"</span>, <span class="string">"#E94F37"</span>, <span class="string">"#1C89BF"</span>, <span class="string">"#A1D363"</span>,</div><div class="line">              <span class="string">"#85FFC7"</span>, <span class="string">"#297373"</span>, <span class="string">"#FF8552"</span>, <span class="string">"#A40E4C"</span>];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> renderData = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colors.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> color = colors[i];</div><div class="line">        <span class="comment">// React 可以用这个唯一的标识符来优化任何将来的 UI 更新</span></div><div class="line">        renderData.push(<span class="xml"><span class="tag">&lt;<span class="name">Circle</span> <span class="attr">key</span>=<span class="string">&#123;i</span> + <span class="attr">color</span>&#125; <span class="attr">bgcolor</span>=<span class="string">&#123;color&#125;/</span>&gt;</span>);</span></div><div class="line">    &#125;</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            &#123;renderData&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">        destination</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="React中的事件"><a href="#React中的事件" class="headerlink" title="React中的事件"></a>React中的事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> destination = <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Counter = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> textStyle = &#123;</div><div class="line">                <span class="attr">fontSize</span>: <span class="number">72</span>,</div><div class="line">                <span class="attr">fontFamily</span>: <span class="string">"sans-serif"</span>,</div><div class="line">                <span class="attr">color</span>: <span class="string">"#333"</span>,</div><div class="line">                <span class="attr">fontWeight</span>: <span class="string">"bold"</span></div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;textStyle&#125;</span>&gt;</span></span></div><div class="line">                    &#123;this.props.display&#125;</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> CounterParent = React.createClass(&#123;</div><div class="line">        <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">count</span>: <span class="number">0</span></div><div class="line">            &#125;;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">increase</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> currentCount = <span class="keyword">this</span>.state.count;</div><div class="line">            <span class="keyword">if</span>(e.shiftKey)&#123;</div><div class="line">                currentCount += <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                currentCount += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">count</span>:  currentCount</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> backgroundStyle = &#123;</div><div class="line">                <span class="attr">padding</span>: <span class="number">50</span>,</div><div class="line">                <span class="attr">backgroundColor</span>: <span class="string">"#FFC53A"</span>,</div><div class="line">                <span class="attr">width</span>: <span class="number">250</span>,</div><div class="line">                <span class="attr">height</span>: <span class="number">100</span>,</div><div class="line">                <span class="attr">borderRadius</span>: <span class="number">10</span>,</div><div class="line">                <span class="attr">textAlign</span>: <span class="string">"center"</span></div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">var</span> buttonStyle = &#123;</div><div class="line">                <span class="attr">fontSize</span>: <span class="string">"1em"</span>,</div><div class="line">                <span class="attr">width</span>: <span class="number">30</span>,</div><div class="line">                <span class="attr">height</span>: <span class="number">30</span>,</div><div class="line">                <span class="attr">fontFamily</span>: <span class="string">"sans-serif"</span>,</div><div class="line">                <span class="attr">color</span>: <span class="string">"#333"</span>,</div><div class="line">                <span class="attr">fontWeight</span>: <span class="string">"bold"</span>,</div><div class="line">                <span class="attr">lineHeight</span>: <span class="string">"3px"</span></div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;backgroundStyle&#125;</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">display</span>=<span class="string">&#123;this.state.count&#125;/</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increase&#125;</span> <span class="attr">style</span>=<span class="string">&#123;buttonStyle&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">CounterParent</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">        destination</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不能在组件上监听事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">// 不能直接在组件上监听事件</span></div><div class="line">    <span class="keyword">var</span> destination = <span class="built_in">document</span>.querySelector(<span class="string">"#container"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Counter = React.createClass(&#123;</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> textStyle = &#123;</div><div class="line">                <span class="attr">fontSize</span>: <span class="number">72</span>,</div><div class="line">                <span class="attr">fontFamily</span>: <span class="string">"sans-serif"</span>,</div><div class="line">                <span class="attr">color</span>: <span class="string">"#333"</span>,</div><div class="line">                <span class="attr">fontWeight</span>: <span class="string">"bold"</span></div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;textStyle&#125;</span>&gt;</span></span></div><div class="line">                    &#123;this.props.display&#125;</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> CounterParent = React.createClass(&#123;</div><div class="line">        <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">count</span>: <span class="number">0</span></div><div class="line">            &#125;;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">increase</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> currentCount = <span class="keyword">this</span>.state.count;</div><div class="line">            <span class="keyword">if</span>(e.shiftKey)&#123;</div><div class="line">                currentCount += <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                currentCount += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">count</span>:  currentCount</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> backgroundStyle = &#123;</div><div class="line">                <span class="attr">padding</span>: <span class="number">50</span>,</div><div class="line">                <span class="attr">backgroundColor</span>: <span class="string">"#FFC53A"</span>,</div><div class="line">                <span class="attr">width</span>: <span class="number">250</span>,</div><div class="line">                <span class="attr">height</span>: <span class="number">100</span>,</div><div class="line">                <span class="attr">borderRadius</span>: <span class="number">10</span>,</div><div class="line">                <span class="attr">textAlign</span>: <span class="string">"center"</span></div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">var</span> buttonStyle = &#123;</div><div class="line">                <span class="attr">fontSize</span>: <span class="string">"1em"</span>,</div><div class="line">                <span class="attr">width</span>: <span class="number">30</span>,</div><div class="line">                <span class="attr">height</span>: <span class="number">30</span>,</div><div class="line">                <span class="attr">fontFamily</span>: <span class="string">"sans-serif"</span>,</div><div class="line">                <span class="attr">color</span>: <span class="string">"#333"</span>,</div><div class="line">                <span class="attr">fontWeight</span>: <span class="string">"bold"</span>,</div><div class="line">                <span class="attr">lineHeight</span>: <span class="string">"3px"</span></div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                &lt;div style=&#123;backgroundStyle&#125;&gt;</div><div class="line">                    &lt;Counter display=&#123;this.state.count&#125;/&gt;</div><div class="line">                    &#123;/* &lt;button onClick=&#123;this.increase&#125; style=&#123;buttonStyle&#125;&gt;+&lt;/button&gt; */&#125;</div><div class="line">                    &lt;PlusButton clickHandler=&#123;this.increase&#125;/&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    var PlusButton = React.createClass(&#123;</div><div class="line">        render: function()&#123;</div><div class="line">            return (</div><div class="line">                &lt;button onClick=&#123;this.props.clickHandler&#125;&gt;+</div><div class="line">                &lt;/button&gt;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    ReactDOM.render(</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;CounterParent/&gt;</div><div class="line">        &lt;/div&gt;,</div><div class="line">        destination</div><div class="line">    );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>对于那些 React 官方不能识别的事件，你必须用传统的 addEventListener，加上一些额外的手段，就像下面这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> Something = React.createClass(&#123;</div><div class="line">        <span class="attr">handleMyEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="comment">// do something</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 在组件被渲染时自动调用</span></div><div class="line">        componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">"someEvent"</span>, <span class="keyword">this</span>.handleMyEvent);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">componentWillUnmount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">"someEvent"</span>, <span class="keyword">this</span>.handleMyEvent);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;); </div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一个React程序&quot;&gt;&lt;a href=&quot;#第一个React程序&quot; class=&quot;headerlink&quot; title=&quot;第一个React程序&quot;&gt;&lt;/a&gt;第一个React程序&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- React 核心库 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;react.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- React DOM 库 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;react-dom.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Babel 编译器，将 JSX 变成 JavaScript --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;browser.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/babel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; destination = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#container&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ReactDOM.render(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        destination&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*ReactDOM.render(React.createElement(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &quot;h1&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        null,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &quot;Hello World&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ), destination);*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="React" scheme="http://wwww.yesokiloveyou.com/categories/React/"/>
    
    
      <category term="React" scheme="http://wwww.yesokiloveyou.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Demo List</title>
    <link href="http://wwww.yesokiloveyou.com/2016/11/22/demo/"/>
    <id>http://wwww.yesokiloveyou.com/2016/11/22/demo/</id>
    <published>2016-11-22T14:00:20.000Z</published>
    <updated>2016-12-04T17:00:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/resources/demo/index.html">持续更新中…</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/resources/demo/index.html&quot;&gt;持续更新中…&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="JS" scheme="http://wwww.yesokiloveyou.com/categories/JS/"/>
    
    
      <category term="Demo" scheme="http://wwww.yesokiloveyou.com/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>Git使用</title>
    <link href="http://wwww.yesokiloveyou.com/2016/11/15/git/"/>
    <id>http://wwww.yesokiloveyou.com/2016/11/15/git/</id>
    <published>2016-11-15T14:07:50.000Z</published>
    <updated>2016-11-22T13:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"blackawhite"</span></div><div class="line">git config --global user.email <span class="string">"dangpugui@126.com"</span></div><div class="line">git config --global user.name    <span class="comment">#查看</span></div><div class="line">git config --list</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init    <span class="comment">#使用Git就要先初始化</span></div></pre></td></tr></table></figure>
<h3 id="三个区"><a href="#三个区" class="headerlink" title="三个区"></a>三个区</h3><p>工作区：就是你当前写东西的目录<br>暂存区：作为过度层、避免误操作、保护工作区和版本区、分支处理<br>版本区：<br>添加、修改、删除，红色代表工作区内容、绿色暂存区，+添加，~修改，-删除，！冲突<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status查看状态</div></pre></td></tr></table></figure></p>
<p>添加到暂存区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add fileName</div><div class="line">git add .</div><div class="line">git add --all   <span class="comment">#git add -A</span></div></pre></td></tr></table></figure></p>
<p>添加到版本库（版本区）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git commit demo1.html &gt;&gt; 回车 &gt;&gt; 写注释 &gt;&gt;关闭</div><div class="line">git commit -m <span class="string">"change demo1.html"</span></div><div class="line">从工作区直接到版本库</div><div class="line">git commit <span class="_">-a</span> -m <span class="string">"add drag.js"</span>第一次时不能这样使用</div></pre></td></tr></table></figure></p>
<p>从暂存区撤回到工作区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD demo1.html</div></pre></td></tr></table></figure></p>
<h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span>     <span class="comment">#回车时显示后面的，退出按q键即可</span></div><div class="line">git <span class="built_in">log</span> --pretty=oneline    <span class="comment">#精简版显示</span></div></pre></td></tr></table></figure>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git diff    <span class="comment">#查看修改内容，工作区和暂存区的比较</span></div><div class="line">git diff --cached(--staged)    <span class="comment">#暂存区与版本区的对比</span></div><div class="line">git diff master(分支名字)   <span class="comment">#工作区与版本库</span></div><div class="line">git diff HEAD -- readme.txt</div></pre></td></tr></table></figure>
<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git reset HEAD &lt;file.name&gt;      <span class="comment">#撤销暂存区的提交/提交，在没有commit的情况下，从新回到未add状态</span></div><div class="line">git checkout -- &lt;file.name&gt;     <span class="comment">#工作区撤销到版本区的状态，例如误删或误改了文件</span></div><div class="line">git commit -m <span class="string">"aa"</span> --amend      <span class="comment">#误提交后和上一个提交的作为一次提交，让两次不同提交变成一次</span></div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rm &lt;file.name&gt;      <span class="comment">#在工作区已经删除的情况下删除暂存区</span></div><div class="line">git rm <span class="_">-f</span> &lt;file.name&gt;   <span class="comment">#在工作区一删除或未删除的情况下删除工作区和暂存区，暂存区必须存在</span></div><div class="line">fit rm --cached &lt;file.name&gt;     <span class="comment">#在工作区还在或不在时都能，删除缓存区，而工作区不受影响</span></div></pre></td></tr></table></figure>
<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout Id &lt;file.name&gt;     <span class="comment">#恢复指定文件</span></div><div class="line">git reset --hard HEAD^    <span class="comment">#恢复到上一次commit的版本</span></div><div class="line">git reset --hard Id     <span class="comment">#恢复指定版本</span></div><div class="line">git reset --hard HEAD^      <span class="comment">#往下恢复后之前的log就没有了通过git reglog</span></div><div class="line">git reset --hard HEAD~num</div></pre></td></tr></table></figure>
<h3 id="同步Github"><a href="#同步Github" class="headerlink" title="同步Github"></a>同步Github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git remote      <span class="comment">#查看远程仓库名字</span></div><div class="line">git remote -v   <span class="comment">#对应远程仓库地址</span></div><div class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span>    <span class="comment">#创建SSH</span></div><div class="line">git remote rm origin&lt;主机名&gt;     <span class="comment">#删除远程仓库</span></div><div class="line">git remote add origin git@...   <span class="comment">#添加远程仓库</span></div><div class="line">git push origin(远端名字) master(分支名字)      <span class="comment">#推送</span></div></pre></td></tr></table></figure>
<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> url</div></pre></td></tr></table></figure>
<h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git pull    <span class="comment">#直接合并</span></div><div class="line">git fetch     <span class="comment">#手动合并，手动解决</span></div><div class="line">git diff master origin/master   <span class="comment">#查看区别</span></div><div class="line">git merge origin/master</div></pre></td></tr></table></figure>
<h3 id="参与开源项目"><a href="#参与开源项目" class="headerlink" title="参与开源项目"></a>参与开源项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Fork 开了一个新的分支，克隆了一个版本</div><div class="line">　　&gt;&gt;命令行克隆自己fork过来的，然后修改并提交</div><div class="line">　　&gt;&gt;Pull request</div><div class="line">　　&gt;&gt;New pull request</div><div class="line">　　&gt;&gt;Create pull request</div><div class="line">对方：</div><div class="line">　　&gt;&gt;Merge pull request</div><div class="line">　　&gt;&gt;confirm</div><div class="line">　　回复技巧：选中对方信息，按R键</div></pre></td></tr></table></figure>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>稳定版本库的分支 &gt;&gt; 开发  &gt;&gt;  合并到稳定的版本，master 一般默认为项目的主分支，不同的开发人员在不同的分支上进行开发互相不影响。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git branch  <span class="comment">#查看当前分支</span></div><div class="line">git branch new1     <span class="comment">#创建分支，github上也可直接创建</span></div><div class="line">git checkout new1   <span class="comment">#切换分支</span></div><div class="line">git checkout -b new2    <span class="comment">#创建并切换</span></div><div class="line">git merge new1      <span class="comment">#合并分支，合并分支先切换到master</span></div><div class="line">git branch --merged     <span class="comment">#查看当前分支所合并的分支</span></div><div class="line">git branch --no-merged  <span class="comment">#查看与当前分支未合并的分支</span></div><div class="line">git branch <span class="_">-d</span> new1      <span class="comment">#删除合并后的没用的new1分支</span></div><div class="line">git branch -D new2      <span class="comment">#删除没有合并的分支</span></div><div class="line">git status      <span class="comment">#查看冲突的文件，人工解决合并文件的冲突后然后再提交</span></div></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag		<span class="comment">#查看</span></div><div class="line">git tag v1.0 	<span class="comment">#打标签，也可github上直接创建</span></div><div class="line">git push origin v1.0 	<span class="comment">#提交打的标签/版本</span></div></pre></td></tr></table></figure>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://git.oschina.net/progit/</div><div class="line">http://www.liaoxuefeng.com/</div><div class="line">https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5</div></pre></td></tr></table></figure>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ls  <span class="comment">#查看目录结构</span></div><div class="line">mkdir   <span class="comment">#创建</span></div><div class="line">tab     <span class="comment">#自动补全</span></div><div class="line">git config --global alias.co checkout   <span class="comment">#co等于checkout，设置别名</span></div><div class="line">git config --list   <span class="comment">#查看别名</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设置&quot;&gt;&lt;a href=&quot;#设置&quot; class=&quot;headerlink&quot; title=&quot;设置&quot;&gt;&lt;/a&gt;设置&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;blackawhite&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;dangpugui@126.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.name    &lt;span class=&quot;comment&quot;&gt;#查看&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --list&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://wwww.yesokiloveyou.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="http://wwww.yesokiloveyou.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Node读书笔记</title>
    <link href="http://wwww.yesokiloveyou.com/2016/11/13/note-nodejs/"/>
    <id>http://wwww.yesokiloveyou.com/2016/11/13/note-nodejs/</id>
    <published>2016-11-13T10:11:26.000Z</published>
    <updated>2016-11-22T13:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FS-API的应用"><a href="#FS-API的应用" class="headerlink" title="FS API的应用"></a>FS API的应用</h2><p>需求：展示当前目录下列表并给出选择，当选择文件时显示内容，选择目录时，显示该目录下文件信息。<a id="more"></a></p>
<h3 id="fs-readdir"><a href="#fs-readdir" class="headerlink" title="fs.readdir()"></a>fs.readdir()</h3><p>读取目录<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(fs.readdirSync(__dirname));<span class="comment">//同步获取当前目录的文件列表</span></div></pre></td></tr></table></figure></p>
<p>readdir()第一个参数的3种写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.readdir(<span class="string">'.'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.readdir(__dirname,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.readdir(process.cwd(),<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
<h3 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile()"></a>fs.readFile()</h3><p>读取文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.readFile(filename,utf<span class="number">-8</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="fs-stat"><a href="#fs-stat" class="headerlink" title="fs.stat()"></a>fs.stat()</h3><p>读取文件或目录的元数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.stat(filename,<span class="function"><span class="keyword">function</span>(<span class="params">err,stat</span>)</span>&#123;&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</div><div class="line">    stdin = process.stdin,<span class="comment">//可读流</span></div><div class="line">    stdout = process.stdout;<span class="comment">//可写流</span></div><div class="line"></div><div class="line"><span class="comment">//process.cwd()返回运行当前脚本的工作路径</span></div><div class="line">fs.readdir(process.cwd(),<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</div><div class="line">    <span class="comment">//输出一个空行，便于阅读</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!files.length)&#123;</div><div class="line">        <span class="comment">//文件不存在直接提示并返回</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'No files to show!'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//提示用户选择</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Select which file or direcrory you want to see\n'</span>);</div><div class="line">    <span class="comment">//后面会多次用到，保存一下</span></div><div class="line">    <span class="keyword">var</span> stats = [];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">file</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">        <span class="comment">//filename可能是目录或着文件所以下面要利用fs.stat()作出判断</span></div><div class="line">        <span class="keyword">var</span> filename = files[i];</div><div class="line">        <span class="comment">//fs.stat会给出文件或者目录的元数据</span></div><div class="line">        fs.stat(__dirname + <span class="string">'/'</span> + filename,<span class="function"><span class="keyword">function</span>(<span class="params">err,stat</span>)</span>&#123;</div><div class="line">            stats[i] = stat;</div><div class="line">            <span class="comment">//输出目录或文件的名字</span></div><div class="line">            <span class="keyword">if</span>(stats[i].isDirectory())&#123;<span class="comment">//如果是目录</span></div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'目录：'</span> + i + <span class="string">'    '</span> + filename);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;<span class="comment">//如果说文件</span></div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'文件：'</span> + i + <span class="string">'    '</span> + filename); </div><div class="line">            &#125;</div><div class="line">            <span class="comment">//说明文件或目录输出完毕</span></div><div class="line">            <span class="keyword">if</span>(++i == files.length)&#123;</div><div class="line">                <span class="comment">//接下来的操作就是让用户输入选择</span></div><div class="line">                read();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//继续输出</span></div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                file(i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line">        <span class="comment">//不换行输出选择提示信息</span></div><div class="line">        stdout.write(<span class="string">'Enter your choice:'</span>);</div><div class="line">        <span class="comment">//等待用户输入</span></div><div class="line">        stdin.resume();</div><div class="line">        <span class="comment">//使支持特殊字符</span></div><div class="line">        stdin.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">        <span class="comment">//监听用户输入的信息</span></div><div class="line">        stdin.on(<span class="string">'data'</span>,option);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//用户的操作</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">option</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> filename = files[<span class="built_in">Number</span>(data)]</div><div class="line">        <span class="keyword">if</span>(!filename)&#123;</div><div class="line">            <span class="comment">//若输入的内容不在列出内容之中</span></div><div class="line">            stdout.write(<span class="string">'Enter you choice again:'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            stdin.pause();</div><div class="line">            <span class="comment">//读取目录或文件，stats数组已经保存了所有文件或目录的元数据</span></div><div class="line">            <span class="keyword">if</span>(stats[<span class="built_in">Number</span>(data)].isDirectory())&#123;<span class="comment">//若是目录</span></div><div class="line">                <span class="comment">//读取目录</span></div><div class="line">                fs.readdir(__dirname + <span class="string">'/'</span> + filename,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line">                    <span class="built_in">console</span>.log(files.length + <span class="string">'files'</span>);</div><div class="line">                    <span class="comment">//files是一个数组，里面存的说filename</span></div><div class="line">                    files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">'    _   '</span> + file);</div><div class="line">                    &#125;);</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;<span class="comment">//若是文件</span></div><div class="line">                fs.readFile(__dirname + <span class="string">'/'</span> + filename,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line">                    <span class="comment">//输出内容</span></div><div class="line">                    <span class="built_in">console</span>.log(data);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    file(<span class="number">0</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="一个简单的web服务器"><a href="#一个简单的web服务器" class="headerlink" title="一个简单的web服务器"></a>一个简单的web服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(req.url);</div><div class="line">    <span class="keyword">if</span>(<span class="string">'/'</span> == req.url)&#123;</div><div class="line">        res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line"></div><div class="line">        res.end([</div><div class="line">            <span class="string">'&lt;form method="POST" action="/url"&gt;'</span>,</div><div class="line">            <span class="string">'&lt;h1&gt;My form&lt;/h1&gt;'</span>,</div><div class="line">            <span class="string">'&lt;fieldset&gt;'</span>,</div><div class="line">            <span class="string">'&lt;label&gt;Personal information&lt;/label&gt;'</span>,</div><div class="line">            <span class="string">'&lt;p&gt;What is your name?&lt;/p&gt;'</span>,</div><div class="line">            <span class="string">'&lt;input type="text" name="name"&gt;'</span>,</div><div class="line">            <span class="string">'&lt;p&gt;&lt;button&gt;Submit&lt;/button&gt;&lt;/p&gt;'</span>,</div><div class="line">            <span class="string">'&lt;/fieldset&gt;'</span>,</div><div class="line">            <span class="string">'&lt;/form&gt;'</span></div><div class="line">        ].join(<span class="string">''</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'/url'</span> == req.url &amp;&amp; <span class="string">'POST'</span> == req.method)&#123;</div><div class="line">        <span class="keyword">var</span> body =<span class="string">''</span>;</div><div class="line">        req.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</div><div class="line">            body += chunk;</div><div class="line">        &#125;);</div><div class="line">        req.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">            <span class="comment">//res.end('&lt;p&gt;Content-Type:'+ req.headers['content-type'] +'&lt;/p&gt;' + '&lt;p&gt;Data:&lt;/p&gt;&lt;pre&gt;' + body + '&lt;/pre&gt;');</span></div><div class="line">            res.end(<span class="string">'&lt;p&gt;Your name is &lt;b&gt;'</span>+ qs.parse(body).name +<span class="string">'&lt;/b&gt;&lt;/p&gt;'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        res.writeHead(<span class="number">404</span>);</div><div class="line">        res.end(<span class="string">'Not Found'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;FS-API的应用&quot;&gt;&lt;a href=&quot;#FS-API的应用&quot; class=&quot;headerlink&quot; title=&quot;FS API的应用&quot;&gt;&lt;/a&gt;FS API的应用&lt;/h2&gt;&lt;p&gt;需求：展示当前目录下列表并给出选择，当选择文件时显示内容，选择目录时，显示该目录下文件信息。
    
    </summary>
    
      <category term="Node" scheme="http://wwww.yesokiloveyou.com/categories/Node/"/>
    
    
      <category term="Node笔记" scheme="http://wwww.yesokiloveyou.com/tags/Node%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo备份</title>
    <link href="http://wwww.yesokiloveyou.com/2016/11/12/backups/"/>
    <id>http://wwww.yesokiloveyou.com/2016/11/12/backups/</id>
    <published>2016-11-12T13:53:15.000Z</published>
    <updated>2016-11-24T18:36:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo源文件一定一定要备份，同时实现多台电脑同步写作的目的，下面是我的方法：</p>
<p>#新建分支，删除分支命令：git branch -d source<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch <span class="built_in">source</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>#切换到source分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="built_in">source</span></div></pre></td></tr></table></figure></p>
<p>#add<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure></p>
<p>#注意提交操作是在source分支下进行的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">'.'</span></div></pre></td></tr></table></figure></p>
<p>#正常push即可，要指定分支的名字，需要拉取操作时一样要指定名字，就像git pull origin source<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin <span class="built_in">source</span></div></pre></td></tr></table></figure></p>
<p>#若要切换回主分支时，发现新建的文章或source分支开发的内容会不见了，<strong>需要merge一下就出来了</strong>，一直merge保持分支同步是好的，但有时也有点麻烦，例如当你删除一篇文章并提交后，回到主分支发现却还在，此时还需要再次merge删除主分支的，所以建议一直在source目录下进行一切工作就可以了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge <span class="built_in">source</span></div></pre></td></tr></table></figure></p>
<p>以上是备份source目录同时不影响本地部署的方法，然后切换另外一台电脑时只需：<br>1、 全局安装hexo-cli<br>2、 连接Git远程仓库<br>3、 拉取source资源：git pull origin source<br>4、 安装依赖包：cnpm install<br><strong>此时两台电脑上的内容就完全一样了，备份的方法同上。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo源文件一定一定要备份，同时实现多台电脑同步写作的目的，下面是我的方法：&lt;/p&gt;
&lt;p&gt;#新建分支，删除分支命令：git branch -d source&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git branch &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="备份" scheme="http://wwww.yesokiloveyou.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>适配移动端</title>
    <link href="http://wwww.yesokiloveyou.com/2016/11/12/rem/"/>
    <id>http://wwww.yesokiloveyou.com/2016/11/12/rem/</id>
    <published>2016-11-11T18:36:44.000Z</published>
    <updated>2016-11-22T13:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见方式"><a href="#常见方式" class="headerlink" title="常见方式"></a>常见方式</h3><p>固定宽度(320)做法，移动端刚兴起时这么做过一段时间，重构倒是爽了，可是大页面两边有留白，小页面图标文字又会缩的很小，用户体验极其不好。<a id="more"></a></p>
<p>流式布局，其实就是用%，这样宽度倒还好写，高度就麻烦了，所以这种布局一般都是宽度自适应高度写死或者高度也用%，注意高度%是相对于父级宽度来算的，高度写死会显的不协调，高度%比会相对复杂，基本上桌面一直开个计算器是必须的，另外对设计也有很大的限制，复杂点的设计也不易实现。</p>
<p>响应式布局，说白了就是利用CSS3中的Media Query（媒介查询），不同设备尺寸对应不同的样式，也就是说你要准备多套样式，开始喊的很火，谁用谁知道，简直累死人不要命，个人认为其适用场景更适合局部页面的调整和适配。</p>
<p>设置viewport进行缩放：以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都就可以兼容iphone6 plus的屏幕了，例如想下面这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=320,maximum-scale=1.3,user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>利用vh、vw适配：兼容性太差。</p>
<h3 id="rem是什么"><a href="#rem是什么" class="headerlink" title="rem是什么"></a>rem是什么</h3><p>rem是一个相对根元素html字体大小的单位，所以rem表示的大小是由html的fontSize大小决定的。</p>
<p>假如我把html的fontSize设置为10px，此时的1rem就等于10px，假如我把html的fontSize设置为100px，此时的1rem就等于100px，这也正是我们能用rem做移动端适配的根本原因，就是通过不同屏幕下改变根元素fontSize的大小，从而让以rem为单位的各种元素自动随着改变。</p>
<h3 id="适配标准"><a href="#适配标准" class="headerlink" title="适配标准"></a>适配标准</h3><p>通过下面这句话获得<a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">理想视口</a>（ideal viewport）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>既然要适配，就要选一个理想视口做基准，然后才能在此基础上等比缩放（这里等比缩放最好不包括文字，后面讲原因），我们一般选择iphone6的375，为什么选它呢？</p>
<p>因为市场上的Android机五花八门（理想视口宽一般在320-480之间），且没有任何一款的占有率能和iphone相比，选取iphone中的iphone6能更好的向下适配iphone5和向上适配iphone6 plus等，关于各机型的理想视口（ideal viewport）详见<a href="http://viewportsizes.com/" target="_blank" rel="external">VIEWPORT SIZES</a></p>
<h3 id="设计图"><a href="#设计图" class="headerlink" title="设计图"></a>设计图</h3><p>上面说了我们要以iphone6为基准，那么设计图我们做成多大呢？</p>
<p>设计图做成750px宽，因为iphone6的物理像素是750（上面我们说的375是它的设备独立像素，又是理想视口），我们要想做到高清就要1个设计像素对应一个物理像素才成，他们之间的关系见下表：</p>
<table>
<thead>
<tr>
<th></th>
<th>iPhone6 plus</th>
<th>iPhone6</th>
<th>iPhone5</th>
</tr>
</thead>
<tbody>
<tr>
<td>物理像素(physical pixel)</td>
<td>看公式</td>
<td>看公式</td>
<td>看公式</td>
</tr>
<tr>
<td>设备独立像素(density-independent pixel)</td>
<td>414x736</td>
<td>375×667</td>
<td>320x568</td>
</tr>
<tr>
<td>设备像素比(device pixel ratio)</td>
<td>3</td>
<td>2</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>设备像素比（dpr），我们可以通过JavaScript获取的办法是：window.devicePixelRatio，用CSS获取的办法是-webkit-device-pixel-ratio，我们可以用-webkit-min-device-pixel-ratio和-webkit-max-device-pixel-ratio进行媒体查询，以达到适配不同dpr的需求。</p>
<h3 id="用CSS适配"><a href="#用CSS适配" class="headerlink" title="用CSS适配"></a>用CSS适配</h3><p>原理：用媒体查询理想视口（上面我们把width=device-width了，所以查询width即可），不同理想视口设置不同的根元素fontSize。</p>
<p>一张750的设计稿，假如其根元素为100px（为什么是100px而不是其他的呢？），此时我想表示一个750px*100px的div，我只需要写成：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">7.5rem</span>; <span class="attribute">height</span>:<span class="number">1rem</span>;&#125;</div></pre></td></tr></table></figure>
<p>那么问题来了，我在iphone6下把根元素字体设为多大才能让这个div等比显示呢？要想等比显示那么他们之间有这样一个关系：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">100px / 750 = iphone6 根元素fontSize / iphone6理想视宽（375）</div></pre></td></tr></table></figure>
<p>根据上面公式算出iphone6 根元素fontSize = 50px，也就是在iphone6下我们只需要改变根元素fontSize为50px就可以做到等比缩放啦~~</p>
<p>那么问题又来了，手机那么多，各种机型的理想宽度也数不胜数（其实大多都在320到480之间，上面有说），那么其对应根元素fontSize我该怎么写呢？</p>
<p>作为一个CSSer，我们最先想到的可能是媒体<strong>断点</strong>查询，例如像下面这样：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">321px</span>) and (max-width:<span class="number">375px</span>)&#123;</div><div class="line">　　<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">42px</span>&#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">376px</span>) and (max-width:<span class="number">414px</span>)&#123;</div><div class="line">　　<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">50px</span>&#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">415px</span>) and (max-width:<span class="number">639px</span>)&#123;</div><div class="line">　　<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">55px</span>&#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">640px</span>) and (max-width:<span class="number">719px</span>)&#123;</div><div class="line">　　<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">85px</span>&#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">720px</span>) and (max-width:<span class="number">749px</span>)&#123;</div><div class="line">　　<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">95</span>x&#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">750px</span>) and (max-width:<span class="number">800px</span>)&#123;</div><div class="line">　　<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">100px</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的缺点一目了然，就是不够精细嘛，例如415-639理想视宽的手机显示的东西却是一样大，对于像素级要求的我们这怎么能成呢？</p>
<p>于是乎我用sass把从320到750全部算一遍不就可以啦，就像下面这样：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (max-width: 320px)&#123;</div><div class="line">　　<span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">266.66667%</span>; &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 320 through 750 &#123;@<span class="keyword">media</span> (width:#&#123;<span class="variable">$i</span>&#125;px)&#123;</div><div class="line">　　<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>: <span class="variable">$i</span>/<span class="number">1.2</span> * <span class="number">1%</span>&#125;&#125;</div><div class="line">&#125;</div><div class="line">@media (min-width: <span class="number">750px</span>)&#123;</div><div class="line">　　html&#123; font-size: <span class="number">625%</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="/resources/files/sass-result.css">Sass生成结果（景象过于壮观慎入）</a>，大功告成，这样我们不用JavaScript也能实现和其一样的精细效果了。使用时只需在头部引用这样一个CSS文件即可，假如750上你量出的div大小为width:85px;height:100px;，写的时候只需除以100即可，即width:.85rem;height:1rem;你要嫌除的麻烦sublime中可以装这么一个转换<a href="https://github.com/flashlizi/CSSrem" target="_blank" rel="external">插件</a>。</p>
<p>这时肯定会有人吐槽性能问题洛，当然这也必定不是好的方式，压缩后的media100px.css大概10几kb的样子，我看了下咱们移动网站的一个普通商品图大概是它的2倍，拿两个东西进行比较是有点不太妥当，具体增加这么些样式会影响多大性能暂未验证。</p>
<p>之所以在750下把根元素设为100而不是其他，是因为方便计算嘛，1rem等于100px，.2rem就等与20px这样多好算啊，有人会问你丫设为10不一样好算啊，话说一般浏览器显示的最小字号是12px，所以就100啦，当然数学好的你用其他值也是可以的。</p>
<p>上面用Sass生成的css根元素字体大小我是用%号表示的，就是100px，我写的是625%，有人可能会问你这干嘛多此一举呢，625%不就是100px嘛，有人给出了下面几个理由，我抄下来共大家参考：</p>
<ul>
<li>一般设备的默认字体大一定是16px，特别是高分辨率的设备，设置成百分比可以按照设备的基准字体大小给编写的网页设置好最适合用户浏览的字体大小</li>
<li>这样写是兼容未来趋势的综合考虑，px这个单位的含义已经越来越混乱，几乎无法评估以后的设备是否会像现在这样对网页上的px做兼容处理，但用百分比代表默认字体尺寸基本不会混乱</li>
</ul>
<h3 id="用JavaScript适配"><a href="#用JavaScript适配" class="headerlink" title="用JavaScript适配"></a>用JavaScript适配</h3><p>上面直接引用media100px.css的确不是最好的方案，你知道我要说什么啦，那就是用JavaScript适配，其实我们把上面的Sass循环改成用JS写就好了，就像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</div><div class="line">　　<span class="keyword">var</span> docEle = doc.documentElement,</div><div class="line">　　evt = <span class="string">"onorientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>,<span class="comment">//区分Mobile和PC以加载不同的事件</span></div><div class="line">　　fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> width = docEle.clientWidth;</div><div class="line">　　　　<span class="keyword">if</span>( width &lt; <span class="number">320</span> ) &#123;</div><div class="line">　　　　　　docEle.style.fontSize = <span class="number">42.6667</span> + <span class="string">"px"</span>;</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">else</span> <span class="keyword">if</span>( width &gt; <span class="number">750</span> ) &#123;</div><div class="line">　　　　　　docEle.style.fontSize = <span class="number">100</span> + <span class="string">"px"</span>;</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">else</span> &#123;</div><div class="line">　　　　　　<span class="comment">//以750设计稿宽度为基准设置fontSize:100px;这样保证iPhone6以下是高清</span></div><div class="line">　　　　　　docEle.style.fontSize = <span class="number">100</span> * (width / <span class="number">750</span>) + <span class="string">"px"</span>;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div><div class="line">　　win.addEventListener(evt, fn, <span class="literal">false</span>);</div><div class="line">　　<span class="comment">//load事件是在页面所有元素都加载完后触发；</span></div><div class="line">　　<span class="comment">//DOMContentLoaded，它是指dom tree加载完就触发,页面引用的样式表和图像文件可能还没有加载完成</span></div><div class="line">　　doc.addEventListener(<span class="string">"DOMContentLoaded"</span>, fn, <span class="literal">false</span>);</div><div class="line">&#125;(<span class="built_in">document</span>, <span class="built_in">window</span>));</div></pre></td></tr></table></figure>
<p>在使用的时候你可以单独引用这样一段JS （看上面我又不用%而用px啦，测试（chrome模拟手机测试的）后发现%和px最终形成网页效果并无差别），不使用不引用即可；或者把这段JS放在公共JS文件里，而对于不想使用rem的同学只需覆盖JS设置的样式即可，例如像下面这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">html&#123;font-size:20px!important;&#125;//这里移动端默认字体大小根据情况自己设置</div></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>文字<strong>最好</strong>不要用rem表示，因为：</p>
<ul>
<li>设计师一般希望是文字在移动设备上的显示大小是一样的，也就是我们所说的等比适配（注意是等比适配不包括，不是适配）是不应包括文字的</li>
<li>我们用rem后文字会很小（虽然这正是等比缩放的结果），当然这也和设计有关（理论上字体需要等比适配的话750px设计图上是不应该有小于24px字体出现的，既然有也说明字体不应该等比适配），例如我在设计图上量取的文字大小是24px，那么其iphone6下的显示大小就是.24rem*50=12px，而设计图上哪些24以下的字体此时也会显示12px（假如最小字体是12的话），这也会有另外一个问题，就是设计图上明明是不同字体大小表示的文案，在手机上显示的大小却是一样的，起不到设计师想要表达的区分或者强调的作用</li>
<li>网上有说会变模糊之类的，我暂时未发现（暴漏了我依然表示字体用rem表示的…）</li>
</ul>
<p>1px和2px不要写成.01rem和.02rem，因为：</p>
<ul>
<li>以750适配的方案为例，当理想视口为320时，其对应font-size: 266.66667%; 然后乘以默认字体大小16px，最后为42.6666672px，也就是43px，若写为.01rem或.02rem表示分别对应.42px或.96px，在直接取整的浏览器下是显示不出来的。所以对于1像素边框的就不要写.01rem啦</li>
</ul>
<ul>
<li>当我们写1px时，实际在dpr为2的手机下显示的是2个物理像素，看起来会粗一点，解决方案可以参照淘宝的<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="external">flexible</a>，其原理是根据dpr的不同动态设置initial-scale的值，也可以用CSS中transform的属性值scale缩放来实现。</li>
</ul>
<p><strong>注：以上JavaScript适配方案是一种思路或者中心思想，在实际使用中会有其他一些问题需要注意，具体可以参考淘宝的</strong><a href="https://github.com/amfe/lib-flexible" target="_blank" rel="external">flexible解决方法</a><strong>，也是目前我们在使用的。</strong></p>
<h3 id="相关文章参考"><a href="#相关文章参考" class="headerlink" title="相关文章参考"></a>相关文章参考</h3><p><a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">移动前端开发之viewport的深入理解</a></p>
<p><a href="http://div.io/topic/1092" target="_blank" rel="external">移动端高清、多屏适配方案</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常见方式&quot;&gt;&lt;a href=&quot;#常见方式&quot; class=&quot;headerlink&quot; title=&quot;常见方式&quot;&gt;&lt;/a&gt;常见方式&lt;/h3&gt;&lt;p&gt;固定宽度(320)做法，移动端刚兴起时这么做过一段时间，重构倒是爽了，可是大页面两边有留白，小页面图标文字又会缩的很小，用户体验极其不好。
    
    </summary>
    
      <category term="HTML/CSS" scheme="http://wwww.yesokiloveyou.com/categories/HTML-CSS/"/>
    
    
      <category term="rem" scheme="http://wwww.yesokiloveyou.com/tags/rem/"/>
    
  </entry>
  
</feed>
